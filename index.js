"use strict";
var _ = require("lodash");
var geo = require("geolib");
var w = require("./onlyworld.json");
var Localize = (function () {
    function Localize(o) {
        if (o && o.world) {
            this.loadWorld(o.world);
        }
        else {
            this.loadWorld(w);
        }
        if (o && o.remote)
            this.remote = o.remote;
    }
    Localize.prototype.loadWorld = function (world) {
        this.world = world;
    };
    Localize.prototype.loadCountry = function (c) {
        var _this = this;
        _.map(_this.world, function (continent) {
            _.map(continent.subcontinents, function (subcontinent) {
                _.map(subcontinent.countries, function (country) {
                    if (c.name === country.name) {
                        country = c;
                        return true;
                    }
                });
            });
        });
    };
    Localize.prototype.downloadCountry = function (o) {
        var _this = this;
        if (!o) {
            throw Error("no options povided");
        }
        else {
            var url = void 0;
            if (o.url) {
                url = o.url;
            }
            else if (_this.remote) {
                url = _this.remote;
            }
            else {
                throw Error("no remote url povided");
            }
        }
    };
    Localize.prototype.setCountryFromPosition = function (o) {
        var _this = this;
        if (_this.getCountryFromPosition(o)) {
            _this.setCountry(_this.getCountryFromPosition(o));
        }
        else {
            throw Error("no state founded");
        }
    };
    Localize.prototype.setCountry = function (country) {
        var _this = this;
        if (country) {
            if (_this.world) {
                var exists_1 = false;
                _.map(_this.world, function (continent) {
                    _.map(continent.subcontinents, function (subcontinent) {
                        _.map(subcontinent.countries, function (c) {
                            if (c.name === country.name) {
                                c = country;
                                exists_1 = true;
                            }
                        });
                    });
                });
                if (exists_1) {
                    console.log("set " + country.name);
                }
                else {
                    throw Error("no state " + country.name);
                }
            }
            else {
                throw Error("no world");
            }
        }
        else {
            throw Error("no state");
        }
        return true;
    };
    Localize.prototype.getCountryFromPosition = function (o) {
        var pos = { latitude: o.latitude, longitude: o.longitude };
        var _this = this;
        var exists = false;
        var c;
        var centers = [];
        _.map(_this.world, function (continent) {
            _.map(continent.subcontinents, function (subcontinent) {
                _.map(subcontinent.countries, function (country) {
                    _.map(country.boundaries, function (area) {
                        if (!c) {
                            if (typeof area[0][0] !== "object") {
                                if (geo.isPointInside(pos, area)) {
                                    exists = true;
                                    c = country;
                                }
                                else {
                                    centers.push({ nation: country.name, distance: geo.getDistance(geo.getCenterOfBounds(area), pos) });
                                }
                            }
                            else {
                                _.map(area, function (a) {
                                    if (geo.isPointInside(pos, a)) {
                                        exists = true;
                                        c = country;
                                    }
                                    else {
                                        centers.push({ nation: country.name, distance: geo.getDistance(geo.getCenterOfBounds(a), pos) });
                                    }
                                });
                            }
                        }
                    });
                });
            });
        });
        if (!exists) {
            var dist_1 = false;
            _.map(centers, function (co) {
                if (!dist_1 || co.distance < dist_1.distance) {
                    dist_1 = co;
                }
            });
            _.map(_this.world, function (continent) {
                _.map(continent.subcontinents, function (subcontinent) {
                    _.map(subcontinent.countries, function (country) {
                        if (dist_1.nation == country.name) {
                            c = country;
                        }
                    });
                });
            });
        }
        return c;
    };
    Localize.prototype.getPosition = function (o) {
        if (!(o && o.latitude && o.longitude))
            throw Error("Error");
        var pos = { latitude: o.latitude, longitude: o.longitude };
        var _this = this;
        var State;
        if (o.state && _this.getState(o.state)) {
            State = _this.getState(o.state);
            console.log('ss');
        }
        else {
            var c = _this.getCountryFromPosition(o);
            if (c.states && c.states.length === 1) {
                State = c.states[0];
            }
            else {
                console.log('todo');
                throw Error("todo");
            }
        }
        var allprovinces = _this.getProvincesFromState(State.name);
        _.map(allprovinces, function (c) {
            c.distance = geo.getDistance({ latitude: c.latitude, longitude: c.longitude }, pos);
        });
        var reprov = _.take(_.orderBy(allprovinces, ['distance'], ['asc']), 2);
        var provinces = [];
        _.map(reprov, function (c) {
            _.map(_this.getCitiesFromProvinces(c.nativeName, State.name), function (p) {
                p.distance = geo.getDistance({ latitude: p.latitude, longitude: p.longitude }, pos);
                provinces.push(p);
            });
        });
        var cities = _.take(_.orderBy(provinces, ['distance'], ['asc']), 2);
        if (cities[0].distance * 1.4 > cities[0].distance) {
            cities = [cities[0]];
        }
        return cities;
    };
    Localize.prototype.getLocation = function (o) {
        return true;
    };
    Localize.prototype.getinfo = function (o) {
        return true;
    };
    Localize.prototype.getState = function (state, o) {
        var exists = false;
        var answer;
        var _this = this;
        if (!_this.world) {
            console.error("no world");
            return false;
        }
        _.map(_this.world, function (continent) {
            _.map(continent.subcontinents, function (subcontinent) {
                _.map(subcontinent.countries, function (country) {
                    _.map(country.states, function (s) {
                        console.log(s.name);
                        if (s.name === state) {
                            exists = true;
                            answer = s;
                        }
                    });
                    if (!exists) {
                        answer = false;
                    }
                });
            });
        });
        return answer;
    };
    Localize.prototype.getProvincesFromState = function (state) {
        var _this = this;
        var State;
        if (state) {
            State = _this.getState(state);
        }
        else {
            throw Error("todo");
        }
        var provinces = [];
        _.map(State.regions, function (r) {
            _.map(r.cities, function (c) {
                provinces.push(c);
            });
        });
        return provinces;
    };
    Localize.prototype.getCitiesFromProvinces = function (city, state) {
        var _this = this;
        var State;
        if (state) {
            State = _this.getState(state);
        }
        else {
            throw Error("todo");
        }
        var provinces = [];
        _.map(State.regions, function (r) {
            _.map(r.provinces, function (p) {
                if (p.main.nativeName === city) {
                    _.map(p.cities, function (c) {
                        provinces.push(c);
                    });
                }
            });
        });
        return provinces;
    };
    return Localize;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = Localize;

//# sourceMappingURL=data:application/json;base64,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QUVMLGVBQUM7QUFBRCxDQXRYQSxBQXNYQyxJQUFBO0FBdFhEOzBCQXNYQyxDQUFBIiwiZmlsZSI6ImluZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgXyBmcm9tIFwibG9kYXNoXCI7XG5cbmNvbnN0IGdlbyA9IHJlcXVpcmUoXCJnZW9saWJcIik7XG5cblxuaW1wb3J0ICogYXMgc3VwZXJhZ2VudCBmcm9tIFwic3VwZXJhZ2VudFwiO1xuXG5cbmludGVyZmFjZSBJQm91bmRhcnkge1xuICAgIGxhdGl0dWRlOiBudW1iZXI7XG4gICAgbG9uZ2l0dWRlOiBudW1iZXI7XG59XG5cbmludGVyZmFjZSBJR2VvY29kZXMge1xuICAgIG5hbWU6IHN0cmluZztcbiAgICBwcm92aW5jZXM6IElHZW9bXTtcbiAgICBjaXRpZXM6IElDaXR5W107XG59XG5cblxuXG5pbnRlcmZhY2UgSUNpdHkge1xuICAgIG5hdGl2ZU5hbWU6IHN0cmluZztcbiAgICBsYXRpdHVkZTogbnVtYmVyO1xuICAgIGxvbmdpdHVkZTogbnVtYmVyO1xuICAgIHppcGNvZGU6IG51bWJlcjtcbiAgICBjaXR5Q29kZTogc3RyaW5nO1xuICAgIHN0YXRlOiBzdHJpbmc7XG4gICAgY291bnRyeTogc3RyaW5nO1xuICAgIGlzb0xhbmc6IHN0cmluZztcbiAgICB0ejogc3RyaW5nO1xuICAgIGN1cnJlbmN5OiBzdHJpbmc7XG4gICAgY3VycmVuY3lTeW1ib2w6IHN0cmluZztcbiAgICBkaXN0YW5jZT86IG51bWJlcjtcbiAgICBzdWJjb250aW5lbnQ6IHN0cmluZztcbiAgICBjb250aW5lbnQ6IHN0cmluZztcbiAgICByZWdpb246IHN0cmluZztcbn1cblxuaW50ZXJmYWNlIElHZW8ge1xuICAgIG5hdGl2ZU5hbWU6IHN0cmluZztcbiAgICB6aXBjb2RlOiBzdHJpbmc7XG4gICAgY2l0aWVzOiBJQ2l0eVtdO1xuICAgIG1haW46IElDaXR5O1xuICAgIGxhdGl0dWRlOiBudW1iZXI7XG4gICAgbG9uZ2l0dWRlOiBudW1iZXI7XG59XG5cblxuaW50ZXJmYWNlIElzdGF0ZSB7XG4gICAgcmVnaW9uczogSUdlb2NvZGVzW107XG4gICAgYm91bmRhcmllczogSUJvdW5kYXJ5W107XG4gICAgY2FwaXRhbDogSUNpdHk7XG4gICAgbmF0aXZlTmFtZTogc3RyaW5nO1xuICAgIGxhdGxuZzogbnVtYmVyW107XG4gICAgaXNvTGFuZzogc3RyaW5nW107XG4gICAgbmFtZTogc3RyaW5nO1xuICAgIHR6OiBzdHJpbmc7XG4gICAgY291bnRyeTogc3RyaW5nO1xuICAgIHN1YmNvbnRpbmVudDogc3RyaW5nO1xuICAgIGNvbnRpbmVudDogc3RyaW5nO1xufVxuXG5pbnRlcmZhY2UgSUNvdW50cnkge1xuICAgIHN0YXRlczogSXN0YXRlW107XG4gICAgbmFtZTogc3RyaW5nO1xuICAgIGJvdW5kYXJpZXM6IElCb3VuZGFyeVtdW107XG4gICAgbmF0aXZlTmFtZTogc3RyaW5nO1xuICAgIGNhcGl0YWw6IElDaXR5O1xuICAgIGN1cnJlbmNpZXM6IHN0cmluZ1tdO1xuICAgIGlzb0xhbmc6IHN0cmluZ1tdO1xuICAgIGxhdGxuZzogbnVtYmVyW107XG4gICAgdHo6IHN0cmluZztcbiAgICBzdWJjb250aW5lbnQ6IHN0cmluZztcbiAgICBjb250aW5lbnQ6IHN0cmluZztcbn1cblxuaW50ZXJmYWNlIElTdWJjb250aW5lbnQge1xuICAgIG5hbWU6IHN0cmluZztcbiAgICBjb3VudHJpZXM6IElDb3VudHJ5W107XG4gICAgYm91bmRhcmllczogSUJvdW5kYXJ5W107XG4gICAgY29udGluZW50OiBzdHJpbmc7XG59XG5cbmludGVyZmFjZSBJR2VvYnVpbGQge1xuICAgIG5hbWU6IHN0cmluZztcbiAgICBzdWJjb250aW5lbnRzOiBJU3ViY29udGluZW50W107XG4gICAgYm91bmRhcmllczogSUJvdW5kYXJ5W107XG59XG5cblxuY29uc3QgdzogSUdlb2J1aWxkW10gPSByZXF1aXJlKFwiLi9vbmx5d29ybGQuanNvblwiKTtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTG9jYWxpemUge1xuICAgIHdvcmxkOiBJR2VvYnVpbGRbXTtcbiAgICByZW1vdGU6IHN0cmluZztcblxuICAgIGNvbnN0cnVjdG9yKG8/OiB7IHdvcmxkPzogSUdlb2J1aWxkW10sIHJlbW90ZT86IHN0cmluZyB9KSB7XG4gICAgICAgIGlmIChvICYmIG8ud29ybGQpIHtcbiAgICAgICAgICAgIHRoaXMubG9hZFdvcmxkKG8ud29ybGQpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmxvYWRXb3JsZCh3KVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG8gJiYgby5yZW1vdGUpIHRoaXMucmVtb3RlID0gby5yZW1vdGVcblxuICAgIH1cblxuICAgIGxvYWRXb3JsZCh3b3JsZDogSUdlb2J1aWxkW10pIHtcbiAgICAgICAgdGhpcy53b3JsZCA9IHdvcmxkO1xuICAgIH1cblxuXG5cbiAgICBsb2FkQ291bnRyeShjOiBJQ291bnRyeSkge1xuICAgICAgICBjb25zdCBfdGhpcyA9IHRoaXM7XG4gICAgICAgIF8ubWFwKF90aGlzLndvcmxkLCBmdW5jdGlvbiAoY29udGluZW50KSB7XG4gICAgICAgICAgICBfLm1hcChjb250aW5lbnQuc3ViY29udGluZW50cywgZnVuY3Rpb24gKHN1YmNvbnRpbmVudCkge1xuICAgICAgICAgICAgICAgIF8ubWFwKHN1YmNvbnRpbmVudC5jb3VudHJpZXMsIGZ1bmN0aW9uIChjb3VudHJ5KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjLm5hbWUgPT09IGNvdW50cnkubmFtZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY291bnRyeSA9IGNcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfSlcbiAgICB9XG5cblxuICAgIGRvd25sb2FkQ291bnRyeShvOiB7IHVybD86IHN0cmluZywgY291bnRyeTogc3RyaW5nIH0pIHtcbiAgICAgICAgY29uc3QgX3RoaXMgPSB0aGlzO1xuICAgICAgICBpZiAoIW8pIHtcbiAgICAgICAgICAgIHRocm93IEVycm9yKFwibm8gb3B0aW9ucyBwb3ZpZGVkXCIpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBsZXQgdXJsO1xuICAgICAgICAgICAgaWYgKG8udXJsKSB7XG4gICAgICAgICAgICAgICAgdXJsID0gby51cmw7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKF90aGlzLnJlbW90ZSkge1xuICAgICAgICAgICAgICAgIHVybCA9IF90aGlzLnJlbW90ZTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoXCJubyByZW1vdGUgdXJsIHBvdmlkZWRcIilcblxuICAgICAgICAgICAgfVxuXG5cblxuXG4gICAgICAgIH1cblxuXG4gICAgfVxuXG4gICAgc2V0Q291bnRyeUZyb21Qb3NpdGlvbihvOiB7IGxhdGl0dWRlOiBudW1iZXIsIGxvbmdpdHVkZTogbnVtYmVyIH0pIHtcblxuICAgICAgICBsZXQgX3RoaXMgPSB0aGlzO1xuICAgICAgICBpZiAoX3RoaXMuZ2V0Q291bnRyeUZyb21Qb3NpdGlvbihvKSkge1xuICAgICAgICAgICAgX3RoaXMuc2V0Q291bnRyeShfdGhpcy5nZXRDb3VudHJ5RnJvbVBvc2l0aW9uKG8pKVxuXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBFcnJvcihcIm5vIHN0YXRlIGZvdW5kZWRcIik7XG5cbiAgICAgICAgfVxuXG4gICAgfVxuXG4gICAgc2V0Q291bnRyeShjb3VudHJ5OiBJQ291bnRyeSk6IGJvb2xlYW4ge1xuICAgICAgICBjb25zdCBfdGhpcyA9IHRoaXM7XG5cbiAgICAgICAgaWYgKGNvdW50cnkpIHtcblxuICAgICAgICAgICAgaWYgKF90aGlzLndvcmxkKSB7XG4gICAgICAgICAgICAgICAgbGV0IGV4aXN0cyA9IGZhbHNlO1xuXG4gICAgICAgICAgICAgICAgXy5tYXAoX3RoaXMud29ybGQsIGZ1bmN0aW9uIChjb250aW5lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgXy5tYXAoY29udGluZW50LnN1YmNvbnRpbmVudHMsIGZ1bmN0aW9uIChzdWJjb250aW5lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF8ubWFwKHN1YmNvbnRpbmVudC5jb3VudHJpZXMsIGZ1bmN0aW9uIChjKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGMubmFtZSA9PT0gY291bnRyeS5uYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGMgPSBjb3VudHJ5XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4aXN0cyA9IHRydWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIH0pXG5cbiAgICAgICAgICAgICAgICBpZiAoZXhpc3RzKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwic2V0IFwiICsgY291bnRyeS5uYW1lKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBFcnJvcihcIm5vIHN0YXRlIFwiICsgY291bnRyeS5uYW1lKTtcblxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBFcnJvcihcIm5vIHdvcmxkXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgRXJyb3IoXCJubyBzdGF0ZVwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuXG4gICAgZ2V0Q291bnRyeUZyb21Qb3NpdGlvbihvOiB7IGxhdGl0dWRlOiBudW1iZXIsIGxvbmdpdHVkZTogbnVtYmVyIH0pOiBJQ291bnRyeSB7XG5cbiAgICAgICAgbGV0IHBvcyA9IHsgbGF0aXR1ZGU6IG8ubGF0aXR1ZGUsIGxvbmdpdHVkZTogby5sb25naXR1ZGUgfTtcblxuICAgICAgICBsZXQgX3RoaXMgPSB0aGlzO1xuICAgICAgICBsZXQgZXhpc3RzID0gZmFsc2U7XG4gICAgICAgIGxldCBjOiBJQ291bnRyeTtcbiAgICAgICAgbGV0IGNlbnRlcnMgPSBbXTtcblxuXG5cblxuICAgICAgICBfLm1hcChfdGhpcy53b3JsZCwgZnVuY3Rpb24gKGNvbnRpbmVudCkge1xuICAgICAgICAgICAgXy5tYXAoY29udGluZW50LnN1YmNvbnRpbmVudHMsIGZ1bmN0aW9uIChzdWJjb250aW5lbnQpIHtcblxuICAgICAgICAgICAgICAgIF8ubWFwKHN1YmNvbnRpbmVudC5jb3VudHJpZXMsIGZ1bmN0aW9uIChjb3VudHJ5KSB7XG5cbiAgICAgICAgICAgICAgICAgICAgXy5tYXAoY291bnRyeS5ib3VuZGFyaWVzLCBmdW5jdGlvbiAoYXJlYSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFjKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGFyZWFbMF1bMF0gIT09IFwib2JqZWN0XCIpIHtcblxuXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGdlby5pc1BvaW50SW5zaWRlKHBvcywgYXJlYSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4aXN0cyA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjID0gY291bnRyeTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2VudGVycy5wdXNoKHsgbmF0aW9uOiBjb3VudHJ5Lm5hbWUsIGRpc3RhbmNlOiBnZW8uZ2V0RGlzdGFuY2UoZ2VvLmdldENlbnRlck9mQm91bmRzKGFyZWEpLCBwb3MpIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcblxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF8ubWFwKGFyZWEsIGZ1bmN0aW9uIChhKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChnZW8uaXNQb2ludEluc2lkZShwb3MsIGEpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhpc3RzID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjID0gY291bnRyeTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjZW50ZXJzLnB1c2goeyBuYXRpb246IGNvdW50cnkubmFtZSwgZGlzdGFuY2U6IGdlby5nZXREaXN0YW5jZShnZW8uZ2V0Q2VudGVyT2ZCb3VuZHMoYSksIHBvcykgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSlcblxuXG4gICAgICAgICAgICAgICAgfSlcblxuICAgICAgICAgICAgfSlcblxuICAgICAgICB9KVxuXG4gICAgICAgIGlmICghZXhpc3RzKSB7XG4gICAgICAgICAgICBsZXQgZGlzdDogYW55ID0gZmFsc2U7XG4gICAgICAgICAgICBfLm1hcChjZW50ZXJzLCBmdW5jdGlvbiAoY28pIHtcbiAgICAgICAgICAgICAgICBpZiAoIWRpc3QgfHwgY28uZGlzdGFuY2UgPCBkaXN0LmRpc3RhbmNlKSB7XG4gICAgICAgICAgICAgICAgICAgIGRpc3QgPSBjb1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfSlcblxuICAgICAgICAgICAgXy5tYXAoX3RoaXMud29ybGQsIGZ1bmN0aW9uIChjb250aW5lbnQpIHtcbiAgICAgICAgICAgICAgICBfLm1hcChjb250aW5lbnQuc3ViY29udGluZW50cywgZnVuY3Rpb24gKHN1YmNvbnRpbmVudCkge1xuICAgICAgICAgICAgICAgICAgICBfLm1hcChzdWJjb250aW5lbnQuY291bnRyaWVzLCBmdW5jdGlvbiAoY291bnRyeSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRpc3QubmF0aW9uID09IGNvdW50cnkubmFtZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGMgPSBjb3VudHJ5XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH0pXG5cbiAgICAgICAgfVxuXG5cblxuXG5cblxuXG5cblxuICAgICAgICByZXR1cm4gY1xuXG5cblxuICAgIH1cblxuICAgIGdldFBvc2l0aW9uKG86IHsgbGF0aXR1ZGU6IG51bWJlciwgbG9uZ2l0dWRlOiBudW1iZXIsIHN0YXRlPzogc3RyaW5nIH0pIHtcblxuICAgICAgICBpZiAoIShvICYmIG8ubGF0aXR1ZGUgJiYgby5sb25naXR1ZGUpKSB0aHJvdyBFcnJvcihcIkVycm9yXCIpO1xuXG4gICAgICAgIGxldCBwb3MgPSB7IGxhdGl0dWRlOiBvLmxhdGl0dWRlLCBsb25naXR1ZGU6IG8ubG9uZ2l0dWRlIH07XG5cbiAgICAgICAgbGV0IF90aGlzID0gdGhpcztcbiAgICAgICAgbGV0IFN0YXRlOiBJc3RhdGU7XG4gICAgICAgIGlmIChvLnN0YXRlICYmIF90aGlzLmdldFN0YXRlKG8uc3RhdGUpKSB7XG4gICAgICAgICAgICBTdGF0ZSA9IDxJc3RhdGU+X3RoaXMuZ2V0U3RhdGUoby5zdGF0ZSlcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdzcycpO1xuXG5cblxuICAgICAgICB9IGVsc2Uge1xuXG5cbiAgICAgICAgICAgIGNvbnN0IGMgPSBfdGhpcy5nZXRDb3VudHJ5RnJvbVBvc2l0aW9uKG8pXG5cbiAgICAgICAgICAgIGlmIChjLnN0YXRlcyAmJiBjLnN0YXRlcy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgICAgICBTdGF0ZSA9IGMuc3RhdGVzWzBdXG4gICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ3RvZG8nKTtcblxuICAgICAgICAgICAgICAgIHRocm93IEVycm9yKFwidG9kb1wiKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG5cblxuICAgICAgICAvLyBsaXZlbGxvIG5hemlvbmFsZVxuICAgICAgICBsZXQgYWxscHJvdmluY2VzID0gX3RoaXMuZ2V0UHJvdmluY2VzRnJvbVN0YXRlKFN0YXRlLm5hbWUpO1xuXG5cbiAgICAgICAgXy5tYXAoYWxscHJvdmluY2VzLCBmdW5jdGlvbiAoYykge1xuICAgICAgICAgICAgYy5kaXN0YW5jZSA9IGdlby5nZXREaXN0YW5jZSh7IGxhdGl0dWRlOiBjLmxhdGl0dWRlLCBsb25naXR1ZGU6IGMubG9uZ2l0dWRlIH0sIHBvcyk7XG4gICAgICAgIH0pXG5cblxuICAgICAgICBsZXQgcmVwcm92ID0gXy50YWtlKF8ub3JkZXJCeShhbGxwcm92aW5jZXMsIFsnZGlzdGFuY2UnXSwgWydhc2MnXSksIDIpO1xuXG4gICAgICAgIGxldCBwcm92aW5jZXMgPSBbXTtcbiAgICAgICAgXy5tYXAocmVwcm92LCBmdW5jdGlvbiAoYzogSUNpdHkpIHtcblxuICAgICAgICAgICAgXy5tYXAoX3RoaXMuZ2V0Q2l0aWVzRnJvbVByb3ZpbmNlcyhjLm5hdGl2ZU5hbWUsIFN0YXRlLm5hbWUpLCBmdW5jdGlvbiAocCkge1xuICAgICAgICAgICAgICAgIHAuZGlzdGFuY2UgPSBnZW8uZ2V0RGlzdGFuY2UoeyBsYXRpdHVkZTogcC5sYXRpdHVkZSwgbG9uZ2l0dWRlOiBwLmxvbmdpdHVkZSB9LCBwb3MpO1xuICAgICAgICAgICAgICAgIHByb3ZpbmNlcy5wdXNoKHApXG4gICAgICAgICAgICB9KVxuXG4gICAgICAgIH0pXG5cblxuICAgICAgICBsZXQgY2l0aWVzOiBJQ2l0eVtdID0gPElDaXR5W10+Xy50YWtlKF8ub3JkZXJCeShwcm92aW5jZXMsIFsnZGlzdGFuY2UnXSwgWydhc2MnXSksIDIpO1xuXG4gICAgICAgIGlmIChjaXRpZXNbMF0uZGlzdGFuY2UgKiAxLjQgPiBjaXRpZXNbMF0uZGlzdGFuY2UpIHtcbiAgICAgICAgICAgIGNpdGllcyA9IFtjaXRpZXNbMF1dXG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gY2l0aWVzXG5cblxuICAgIH1cblxuXG4gICAgZ2V0TG9jYXRpb24obzogeyBjaXR5OiBzdHJpbmcsIHN0YXRlPzogc3RyaW5nIH0pIHtcbiAgICAgICAgcmV0dXJuIHRydWVcblxuICAgIH1cblxuICAgIGdldGluZm8obzogeyBjaXR5OiBzdHJpbmcsIHN0YXRlPzogc3RyaW5nIH0pIHtcbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG5cbiAgICBnZXRTdGF0ZShzdGF0ZTogc3RyaW5nLCBvPzogeyBjb250aW5lbnQ/OiBzdHJpbmcgfSk6IElzdGF0ZSB8IGJvb2xlYW4ge1xuXG5cbiAgICAgICAgbGV0IGV4aXN0cyA9IGZhbHNlO1xuXG4gICAgICAgIGxldCBhbnN3ZXI7XG5cbiAgICAgICAgbGV0IF90aGlzID0gdGhpcztcblxuICAgICAgICBpZiAoIV90aGlzLndvcmxkKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFwibm8gd29ybGRcIik7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgfVxuXG4gICAgICAgIF8ubWFwKF90aGlzLndvcmxkLCBmdW5jdGlvbiAoY29udGluZW50KSB7XG5cbiAgICAgICAgICAgIF8ubWFwKGNvbnRpbmVudC5zdWJjb250aW5lbnRzLCBmdW5jdGlvbiAoc3ViY29udGluZW50KSB7XG5cbiAgICAgICAgICAgICAgICBfLm1hcChzdWJjb250aW5lbnQuY291bnRyaWVzLCBmdW5jdGlvbiAoY291bnRyeSkge1xuXG4gICAgICAgICAgICAgICAgICAgIF8ubWFwKGNvdW50cnkuc3RhdGVzLCBmdW5jdGlvbiAocykge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2cocy5uYW1lKVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHMubmFtZSA9PT0gc3RhdGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBleGlzdHMgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuc3dlciA9IHNcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSlcblxuICAgICAgICAgICAgICAgICAgICBpZiAoIWV4aXN0cykge1xuICAgICAgICAgICAgICAgICAgICAgICAgYW5zd2VyID0gZmFsc2VcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9KVxuICAgICAgICB9KVxuXG5cbiAgICAgICAgcmV0dXJuIGFuc3dlclxuXG4gICAgfVxuXG4gICAgZ2V0UHJvdmluY2VzRnJvbVN0YXRlKHN0YXRlKSB7XG5cbiAgICAgICAgbGV0IF90aGlzID0gdGhpcztcbiAgICAgICAgbGV0IFN0YXRlOiBJc3RhdGU7XG5cbiAgICAgICAgaWYgKHN0YXRlKSB7XG4gICAgICAgICAgICBTdGF0ZSA9IDxJc3RhdGU+X3RoaXMuZ2V0U3RhdGUoc3RhdGUpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBFcnJvcihcInRvZG9cIik7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgcHJvdmluY2VzOiBJQ2l0eVtdID0gW107XG5cbiAgICAgICAgXy5tYXAoU3RhdGUucmVnaW9ucywgZnVuY3Rpb24gKHIpIHtcbiAgICAgICAgICAgIF8ubWFwKHIuY2l0aWVzLCBmdW5jdGlvbiAoYykge1xuICAgICAgICAgICAgICAgIHByb3ZpbmNlcy5wdXNoKGMpXG4gICAgICAgICAgICB9KVxuICAgICAgICB9KVxuXG5cbiAgICAgICAgcmV0dXJuIHByb3ZpbmNlc1xuXG4gICAgfVxuXG4gICAgZ2V0Q2l0aWVzRnJvbVByb3ZpbmNlcyhjaXR5LCBzdGF0ZT86IHN0cmluZykge1xuXG4gICAgICAgIGxldCBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGxldCBTdGF0ZTogSXN0YXRlO1xuXG4gICAgICAgIGlmIChzdGF0ZSkge1xuICAgICAgICAgICAgU3RhdGUgPSA8SXN0YXRlPl90aGlzLmdldFN0YXRlKHN0YXRlKVxuXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBFcnJvcihcInRvZG9cIik7XG5cbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBwcm92aW5jZXM6IElDaXR5W10gPSBbXTtcbiAgICAgICAgXy5tYXAoU3RhdGUucmVnaW9ucywgZnVuY3Rpb24gKHIpIHtcbiAgICAgICAgICAgIF8ubWFwKHIucHJvdmluY2VzLCBmdW5jdGlvbiAocCkge1xuICAgICAgICAgICAgICAgIGlmIChwLm1haW4ubmF0aXZlTmFtZSA9PT0gY2l0eSkge1xuICAgICAgICAgICAgICAgICAgICBfLm1hcChwLmNpdGllcywgZnVuY3Rpb24gKGMpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgcHJvdmluY2VzLnB1c2goYylcblxuXG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgfVxuXG5cbiAgICAgICAgICAgIH0pXG5cbiAgICAgICAgfSlcblxuXG4gICAgICAgIHJldHVybiBwcm92aW5jZXNcblxuICAgIH1cblxufSJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
