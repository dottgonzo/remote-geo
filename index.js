"use strict";
var _ = require("lodash");
var geo = require("geolib");
var Promise = require("bluebird");
var superagent = require("superagent");
var w = require("./onlyworld.json");
function loadbBigWorldfromremotedb(url) {
    return new Promise(function (resolve, reject) {
        var bigWorld;
        superagent.get(url).end(function (err, res) {
            if (err || !res.ok) {
                reject(err);
            }
            else {
                bigWorld = res.body.continents;
                resolve(bigWorld);
            }
        });
    });
}
function loadcontryremotely(url, countryName) {
    return new Promise(function (resolve, reject) {
        var country;
        superagent.post(url).send({ countryname: countryName }).end(function (err, res) {
            if (err || !res.ok) {
                reject(err);
            }
            else {
                country = res.body;
                resolve(country);
            }
        });
    });
}
var Localize = (function () {
    function Localize(o) {
        if (!o)
            throw Error("no conf");
        if (o.bigWorld) {
            this.bigWorld = o.bigWorld;
            this.world = w;
        }
        else {
            if (o.state)
                this.state = o.state;
            if (o && o.world) {
                this.world = o.world;
            }
            else {
                this.world = w;
            }
            if (o && o.remote) {
                this.remote = o.remote;
            }
            else if (o && o.worldDB) {
                this.worldDB = o.worldDB;
            }
        }
    }
    Localize.prototype.getCountryFromPosition = function (o) {
        var pos = { latitude: o.latitude, longitude: o.longitude };
        var _this = this;
        var exists = false;
        var c;
        var centers = [];
        _.map(_this.world, function (continent) {
            _.map(continent.subcontinents, function (subcontinent) {
                _.map(subcontinent.countries, function (country) {
                    _.map(country.boundaries, function (area) {
                        if (!c) {
                            if (typeof area[0][0] !== "object") {
                                if (geo.isPointInside(pos, area)) {
                                    exists = true;
                                    c = country;
                                }
                                else {
                                    centers.push({ nation: country.name, distance: geo.getDistance(geo.getCenterOfBounds(area), pos) });
                                }
                            }
                            else {
                                _.map(area, function (a) {
                                    if (geo.isPointInside(pos, a)) {
                                        exists = true;
                                        c = country;
                                    }
                                    else {
                                        centers.push({ nation: country.name, distance: geo.getDistance(geo.getCenterOfBounds(a), pos) });
                                    }
                                });
                            }
                        }
                    });
                });
            });
        });
        if (!exists) {
            var dist_1 = false;
            _.map(centers, function (co) {
                if (!dist_1 || co.distance < dist_1.distance) {
                    dist_1 = co;
                }
            });
            _.map(_this.world, function (continent) {
                _.map(continent.subcontinents, function (subcontinent) {
                    _.map(subcontinent.countries, function (country) {
                        if (dist_1.nation == country.name) {
                            c = country;
                        }
                    });
                });
            });
        }
        return c;
    };
    Localize.prototype.checkifInsideState = function (pos) {
        var _this = this;
        if (!this.state)
            throw Error("no state set");
        var position = this.getPositionFromState(pos, _this.state);
        if (position[0].distance < 20000) {
            return position;
        }
        else {
            return false;
        }
    };
    Localize.prototype.reloadCurrentState = function (pos) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this.getStates(pos).then(function (s) {
                _this.localization = pos;
                _this.state = s;
                resolve(_this.getPositionFromState(pos));
            }).catch(function (err) {
                reject(err);
            });
        });
    };
    Localize.prototype.setPosition = function (pos) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            if (!(pos && pos.latitude && pos.longitude)) {
                reject("No coords provided");
            }
            else {
                if (_this.state) {
                    var checkifInsideState = _this.checkifInsideState(pos);
                    if (checkifInsideState) {
                        _this.localization = pos;
                        resolve(checkifInsideState);
                    }
                    else {
                        _this.reloadCurrentState(pos).then(function (s) {
                            resolve(s);
                        }).catch(function (err) {
                            reject(err);
                        });
                    }
                }
                else {
                    _this.reloadCurrentState(pos).then(function (s) {
                        resolve(s);
                    }).catch(function (err) {
                        reject(err);
                    });
                }
            }
        });
    };
    Localize.prototype.getPositionFromState = function (pos, State) {
        var _this = this;
        var allprovinces = _this.getProvincesFromState(State);
        _.map(allprovinces, function (c) {
            c.distance = geo.getDistance({ latitude: c.latitude, longitude: c.longitude }, pos);
        });
        var reprov = _.take(_.orderBy(allprovinces, ['distance'], ['asc']), 2);
        var provinces = [];
        _.map(reprov, function (c) {
            _.map(_this.getCitiesFromProvinces(c.nativeName, State), function (p) {
                p.distance = geo.getDistance({ latitude: p.latitude, longitude: p.longitude }, pos);
                provinces.push(p);
            });
        });
        var cities = _.take(_.orderBy(provinces, ['distance'], ['asc']), 10);
        return cities;
    };
    Localize.prototype.getLocation = function (o) {
        return true;
    };
    Localize.prototype.getinfo = function (o) {
        return true;
    };
    Localize.prototype.getStateFromCountry = function (pos, country) {
        var state;
        if (country.states.length === 1) {
            state = country.states[0];
        }
        else {
            console.log("todo");
        }
        return state;
    };
    Localize.prototype.getStates = function (pos) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            var country = _this.getCountryFromPosition(pos);
            var exists = false;
            if (_this.bigWorld) {
                _.map(_this.bigWorld, function (continent) {
                    _.map(continent.subcontinents, function (subcontinent) {
                        _.map(subcontinent.countries, function (c) {
                            if (c.name === country.name) {
                                exists = _this.getStateFromCountry(pos, c);
                            }
                        });
                    });
                });
                if (!exists) {
                    reject("no country");
                }
                else {
                    resolve(exists);
                }
            }
            else if (_this.remote) {
                reject("no country");
            }
            else if (_this.worldDB) {
                loadbBigWorldfromremotedb(_this.worldDB).then(function (world) {
                    _.map(world, function (continent) {
                        _.map(continent.subcontinents, function (subcontinent) {
                            _.map(subcontinent.countries, function (c) {
                                if (c.name === country.name) {
                                    exists = _this.getStateFromCountry(pos, c);
                                }
                            });
                        });
                    });
                    if (!exists) {
                        reject("no country");
                    }
                    else {
                        resolve(exists);
                    }
                }).catch(function (err) {
                    reject(err);
                });
            }
        });
    };
    Localize.prototype.getProvincesFromState = function (state) {
        var _this = this;
        var State = _this.state;
        if (state)
            State = state;
        var provinces = [];
        _.map(State.regions, function (r) {
            _.map(r.cities, function (c) {
                provinces.push(c);
            });
        });
        return provinces;
    };
    Localize.prototype.getCitiesFromProvinces = function (city, state) {
        var _this = this;
        var State = this.state;
        if (state)
            State = state;
        var provinces = [];
        _.map(State.regions, function (r) {
            _.map(r.provinces, function (p) {
                if (p.main.nativeName === city) {
                    _.map(p.cities, function (c) {
                        provinces.push(c);
                    });
                }
            });
        });
        return provinces;
    };
    return Localize;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = Localize;

//# sourceMappingURL=data:application/json;base64,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LENBQUMsQ0FBQTtvQkFHckIsQ0FBQyxDQUFDLENBQUE7Z0JBQ04sQ0FBQztZQUdMLENBQUMsQ0FBQyxDQUFBO1FBRU4sQ0FBQyxDQUFDLENBQUE7UUFHRixNQUFNLENBQUMsU0FBUyxDQUFBO0lBRXBCLENBQUM7SUFFTCxlQUFDO0FBQUQsQ0E1VkEsQUE0VkMsSUFBQTtBQTVWRDswQkE0VkMsQ0FBQSIsImZpbGUiOiJpbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIF8gZnJvbSBcImxvZGFzaFwiO1xuXG5jb25zdCBnZW8gPSByZXF1aXJlKFwiZ2VvbGliXCIpO1xuXG5pbXBvcnQgKiBhcyBQcm9taXNlIGZyb20gXCJibHVlYmlyZFwiO1xuXG5cbmltcG9ydCAqIGFzIHN1cGVyYWdlbnQgZnJvbSBcInN1cGVyYWdlbnRcIjtcblxuXG5pbnRlcmZhY2UgSUJvdW5kYXJ5IHsgLy93cm9uZ1xuICAgIGxhdGl0dWRlOiBudW1iZXI7XG4gICAgbG9uZ2l0dWRlOiBudW1iZXI7XG59XG5cbmludGVyZmFjZSBJR2VvY29kZXMge1xuICAgIG5hbWU6IHN0cmluZztcbiAgICBwcm92aW5jZXM6IElHZW9bXTtcbiAgICBjaXRpZXM6IElDaXR5W107XG59XG5cblxuXG5pbnRlcmZhY2UgSUNpdHkge1xuICAgIG5hdGl2ZU5hbWU6IHN0cmluZztcbiAgICBsYXRpdHVkZTogbnVtYmVyO1xuICAgIGxvbmdpdHVkZTogbnVtYmVyO1xuICAgIHppcGNvZGU6IG51bWJlcjtcbiAgICBjaXR5Q29kZTogc3RyaW5nO1xuICAgIHN0YXRlOiBzdHJpbmc7XG4gICAgY291bnRyeTogc3RyaW5nO1xuICAgIGlzb0xhbmc6IHN0cmluZztcbiAgICB0ejogc3RyaW5nO1xuICAgIGN1cnJlbmN5OiBzdHJpbmc7XG4gICAgY3VycmVuY3lTeW1ib2w6IHN0cmluZztcbiAgICBkaXN0YW5jZT86IG51bWJlcjtcbiAgICBzdWJjb250aW5lbnQ6IHN0cmluZztcbiAgICBjb250aW5lbnQ6IHN0cmluZztcbiAgICByZWdpb246IHN0cmluZztcbn1cblxuaW50ZXJmYWNlIElHZW8ge1xuICAgIG5hdGl2ZU5hbWU6IHN0cmluZztcbiAgICB6aXBjb2RlOiBzdHJpbmc7XG4gICAgY2l0aWVzOiBJQ2l0eVtdO1xuICAgIG1haW46IElDaXR5O1xuICAgIGxhdGl0dWRlOiBudW1iZXI7XG4gICAgbG9uZ2l0dWRlOiBudW1iZXI7XG59XG5cblxuaW50ZXJmYWNlIElzdGF0ZSB7XG4gICAgcmVnaW9uczogSUdlb2NvZGVzW107XG4gICAgYm91bmRhcmllczogSUJvdW5kYXJ5W107XG4gICAgY2FwaXRhbDogSUNpdHk7XG4gICAgbmF0aXZlTmFtZTogc3RyaW5nO1xuICAgIGxhdGxuZzogbnVtYmVyW107XG4gICAgaXNvTGFuZzogc3RyaW5nW107XG4gICAgbmFtZTogc3RyaW5nO1xuICAgIHR6OiBzdHJpbmc7XG4gICAgY291bnRyeTogc3RyaW5nO1xuICAgIHN1YmNvbnRpbmVudDogc3RyaW5nO1xuICAgIGNvbnRpbmVudDogc3RyaW5nO1xufVxuXG5pbnRlcmZhY2UgSUNvdW50cnkge1xuICAgIHN0YXRlczogSXN0YXRlW107XG4gICAgbmFtZTogc3RyaW5nO1xuICAgIGJvdW5kYXJpZXM6IElCb3VuZGFyeVtdW107XG4gICAgbmF0aXZlTmFtZTogc3RyaW5nO1xuICAgIGNhcGl0YWw6IElDaXR5O1xuICAgIGN1cnJlbmNpZXM6IHN0cmluZ1tdO1xuICAgIGlzb0xhbmc6IHN0cmluZ1tdO1xuICAgIGxhdGxuZzogbnVtYmVyW107XG4gICAgdHo6IHN0cmluZztcbiAgICBzdWJjb250aW5lbnQ6IHN0cmluZztcbiAgICBjb250aW5lbnQ6IHN0cmluZztcbn1cblxuaW50ZXJmYWNlIElTdWJjb250aW5lbnQge1xuICAgIG5hbWU6IHN0cmluZztcbiAgICBjb3VudHJpZXM6IElDb3VudHJ5W107XG4gICAgYm91bmRhcmllczogSUJvdW5kYXJ5W107XG4gICAgY29udGluZW50OiBzdHJpbmc7XG59XG5cbmludGVyZmFjZSBJR2VvYnVpbGQge1xuICAgIG5hbWU6IHN0cmluZztcbiAgICBzdWJjb250aW5lbnRzOiBJU3ViY29udGluZW50W107XG4gICAgYm91bmRhcmllczogSUJvdW5kYXJ5W107XG59XG5cblxuaW50ZXJmYWNlIElMb2NhbGl6YXRpb24ge1xuICAgIGxhdGl0dWRlOiBudW1iZXI7XG4gICAgbG9uZ2l0dWRlOiBudW1iZXI7XG59XG5cbmNvbnN0IHc6IElHZW9idWlsZFtdID0gcmVxdWlyZShcIi4vb25seXdvcmxkLmpzb25cIik7XG5cblxuZnVuY3Rpb24gbG9hZGJCaWdXb3JsZGZyb21yZW1vdGVkYih1cmwpOiBQcm9taXNlPElHZW9idWlsZFtdPiB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlPElHZW9idWlsZFtdPigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG5cbiAgICAgICAgbGV0IGJpZ1dvcmxkOiBJR2VvYnVpbGRbXTtcblxuICAgICAgICBzdXBlcmFnZW50LmdldCh1cmwpLmVuZChmdW5jdGlvbiAoZXJyLCByZXMpIHtcbiAgICAgICAgICAgIGlmIChlcnIgfHwgIXJlcy5vaykge1xuXG4gICAgICAgICAgICAgICAgcmVqZWN0KGVycilcblxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBiaWdXb3JsZCA9IHJlcy5ib2R5LmNvbnRpbmVudHM7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZShiaWdXb3JsZClcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICB9KVxuXG59XG5cbmZ1bmN0aW9uIGxvYWRjb250cnlyZW1vdGVseSh1cmw6IHN0cmluZywgY291bnRyeU5hbWU6IHN0cmluZyk6IFByb21pc2U8SUNvdW50cnk+IHtcbiAgICByZXR1cm4gbmV3IFByb21pc2U8SUNvdW50cnk+KChyZXNvbHZlLCByZWplY3QpID0+IHtcblxuICAgICAgICBsZXQgY291bnRyeTogSUNvdW50cnk7XG5cbiAgICAgICAgc3VwZXJhZ2VudC5wb3N0KHVybCkuc2VuZCh7IGNvdW50cnluYW1lOiBjb3VudHJ5TmFtZSB9KS5lbmQoZnVuY3Rpb24gKGVyciwgcmVzKSB7XG4gICAgICAgICAgICBpZiAoZXJyIHx8ICFyZXMub2spIHtcbiAgICAgICAgICAgICAgICByZWplY3QoZXJyKVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb3VudHJ5ID0gcmVzLmJvZHk7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZShjb3VudHJ5KVxuICAgICAgICAgICAgfVxuICAgICAgICB9KVxuICAgIH0pXG59XG5cblxuXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIExvY2FsaXplIHtcbiAgICBiaWdXb3JsZDogSUdlb2J1aWxkW107XG4gICAgc3RhdGU6IElzdGF0ZTtcbiAgICB3b3JsZDogSUdlb2J1aWxkW107XG4gICAgcmVtb3RlOiBzdHJpbmc7XG4gICAgd29ybGREQjogc3RyaW5nO1xuICAgIGxvY2FsaXphdGlvbjogSUxvY2FsaXphdGlvbjtcblxuICAgIGNvbnN0cnVjdG9yKG86IHsgd29ybGQ/OiBJR2VvYnVpbGRbXSwgYmlnV29ybGQ/OiBJR2VvYnVpbGRbXSwgcmVtb3RlPzogc3RyaW5nLCB3b3JsZERCPzogc3RyaW5nLCBzdGF0ZT86IElzdGF0ZSB9KSB7XG4gICAgICAgIGlmICghbykgdGhyb3cgRXJyb3IoXCJubyBjb25mXCIpO1xuXG5cbiAgICAgICAgaWYgKG8uYmlnV29ybGQpIHtcbiAgICAgICAgICAgIHRoaXMuYmlnV29ybGQgPSBvLmJpZ1dvcmxkO1xuICAgICAgICAgICAgdGhpcy53b3JsZCA9IHc7XG5cbiAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgaWYgKG8uc3RhdGUpIHRoaXMuc3RhdGUgPSBvLnN0YXRlO1xuXG4gICAgICAgICAgICBpZiAobyAmJiBvLndvcmxkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy53b3JsZCA9IG8ud29ybGRcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy53b3JsZCA9IHdcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKG8gJiYgby5yZW1vdGUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnJlbW90ZSA9IG8ucmVtb3RlXG4gICAgICAgICAgICB9IGVsc2UgaWYgKG8gJiYgby53b3JsZERCKSB7XG4gICAgICAgICAgICAgICAgdGhpcy53b3JsZERCID0gby53b3JsZERCXG4gICAgICAgICAgICB9XG5cblxuICAgICAgICB9XG5cbiAgICB9XG5cbiAgICBnZXRDb3VudHJ5RnJvbVBvc2l0aW9uKG86IElMb2NhbGl6YXRpb24pOiBJQ291bnRyeSB7XG5cbiAgICAgICAgbGV0IHBvczogSUxvY2FsaXphdGlvbiA9IHsgbGF0aXR1ZGU6IG8ubGF0aXR1ZGUsIGxvbmdpdHVkZTogby5sb25naXR1ZGUgfTtcblxuICAgICAgICBsZXQgX3RoaXMgPSB0aGlzO1xuICAgICAgICBsZXQgZXhpc3RzID0gZmFsc2U7XG4gICAgICAgIGxldCBjOiBJQ291bnRyeTtcbiAgICAgICAgbGV0IGNlbnRlcnMgPSBbXTtcblxuICAgICAgICBfLm1hcChfdGhpcy53b3JsZCwgZnVuY3Rpb24gKGNvbnRpbmVudCkge1xuICAgICAgICAgICAgXy5tYXAoY29udGluZW50LnN1YmNvbnRpbmVudHMsIGZ1bmN0aW9uIChzdWJjb250aW5lbnQpIHtcblxuICAgICAgICAgICAgICAgIF8ubWFwKHN1YmNvbnRpbmVudC5jb3VudHJpZXMsIGZ1bmN0aW9uIChjb3VudHJ5KSB7XG5cbiAgICAgICAgICAgICAgICAgICAgXy5tYXAoY291bnRyeS5ib3VuZGFyaWVzLCBmdW5jdGlvbiAoYXJlYSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFjKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGFyZWFbMF1bMF0gIT09IFwib2JqZWN0XCIpIHtcblxuXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGdlby5pc1BvaW50SW5zaWRlKHBvcywgYXJlYSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4aXN0cyA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjID0gY291bnRyeTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2VudGVycy5wdXNoKHsgbmF0aW9uOiBjb3VudHJ5Lm5hbWUsIGRpc3RhbmNlOiBnZW8uZ2V0RGlzdGFuY2UoZ2VvLmdldENlbnRlck9mQm91bmRzKGFyZWEpLCBwb3MpIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcblxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF8ubWFwKGFyZWEsIGZ1bmN0aW9uIChhKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChnZW8uaXNQb2ludEluc2lkZShwb3MsIGEpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhpc3RzID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjID0gY291bnRyeTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjZW50ZXJzLnB1c2goeyBuYXRpb246IGNvdW50cnkubmFtZSwgZGlzdGFuY2U6IGdlby5nZXREaXN0YW5jZShnZW8uZ2V0Q2VudGVyT2ZCb3VuZHMoYSksIHBvcykgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSlcblxuXG4gICAgICAgICAgICAgICAgfSlcblxuICAgICAgICAgICAgfSlcblxuICAgICAgICB9KVxuXG4gICAgICAgIGlmICghZXhpc3RzKSB7XG4gICAgICAgICAgICBsZXQgZGlzdDogYW55ID0gZmFsc2U7XG4gICAgICAgICAgICBfLm1hcChjZW50ZXJzLCBmdW5jdGlvbiAoY28pIHtcbiAgICAgICAgICAgICAgICBpZiAoIWRpc3QgfHwgY28uZGlzdGFuY2UgPCBkaXN0LmRpc3RhbmNlKSB7XG4gICAgICAgICAgICAgICAgICAgIGRpc3QgPSBjb1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfSlcblxuICAgICAgICAgICAgXy5tYXAoX3RoaXMud29ybGQsIGZ1bmN0aW9uIChjb250aW5lbnQpIHtcbiAgICAgICAgICAgICAgICBfLm1hcChjb250aW5lbnQuc3ViY29udGluZW50cywgZnVuY3Rpb24gKHN1YmNvbnRpbmVudCkge1xuICAgICAgICAgICAgICAgICAgICBfLm1hcChzdWJjb250aW5lbnQuY291bnRyaWVzLCBmdW5jdGlvbiAoY291bnRyeSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRpc3QubmF0aW9uID09IGNvdW50cnkubmFtZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGMgPSBjb3VudHJ5XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH0pXG5cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY1xuICAgIH1cblxuXG4gICAgY2hlY2tpZkluc2lkZVN0YXRlKHBvczogSUxvY2FsaXphdGlvbik6IElDaXR5W10gfCBib29sZWFuIHtcbiAgICAgICAgbGV0IF90aGlzID0gdGhpcztcbiAgICAgICAgaWYgKCF0aGlzLnN0YXRlKSB0aHJvdyBFcnJvcihcIm5vIHN0YXRlIHNldFwiKTtcblxuICAgICAgICBsZXQgcG9zaXRpb24gPSB0aGlzLmdldFBvc2l0aW9uRnJvbVN0YXRlKHBvcywgX3RoaXMuc3RhdGUpO1xuXG4gICAgICAgIGlmIChwb3NpdGlvblswXS5kaXN0YW5jZSA8IDIwMDAwKSB7XG4gICAgICAgICAgICByZXR1cm4gcG9zaXRpb25cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICB9XG4gICAgfVxuXG5cbiAgICByZWxvYWRDdXJyZW50U3RhdGUocG9zOiBJTG9jYWxpemF0aW9uKSB7IC8vdG9kb1xuICAgICAgICBsZXQgX3RoaXMgPSB0aGlzO1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2U8SUNpdHlbXT4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuXG4gICAgICAgICAgICBfdGhpcy5nZXRTdGF0ZXMocG9zKS50aGVuKChzKSA9PiB7XG4gICAgICAgICAgICAgICAgX3RoaXMubG9jYWxpemF0aW9uID0gcG9zO1xuICAgICAgICAgICAgICAgIF90aGlzLnN0YXRlID0gcztcbiAgICAgICAgICAgICAgICByZXNvbHZlKF90aGlzLmdldFBvc2l0aW9uRnJvbVN0YXRlKHBvcykpO1xuICAgICAgICAgICAgfSkuY2F0Y2goKGVycikgPT4ge1xuICAgICAgICAgICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICAgICAgfSlcblxuXG5cbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICBzZXRQb3NpdGlvbihwb3M6IElMb2NhbGl6YXRpb24pOiBQcm9taXNlPElDaXR5W10+IHtcbiAgICAgICAgbGV0IF90aGlzID0gdGhpcztcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlPElDaXR5W10+KChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgIGlmICghKHBvcyAmJiBwb3MubGF0aXR1ZGUgJiYgcG9zLmxvbmdpdHVkZSkpIHtcbiAgICAgICAgICAgICAgICByZWplY3QoXCJObyBjb29yZHMgcHJvdmlkZWRcIik7XG4gICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgaWYgKF90aGlzLnN0YXRlKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNoZWNraWZJbnNpZGVTdGF0ZSA9IF90aGlzLmNoZWNraWZJbnNpZGVTdGF0ZShwb3MpXG4gICAgICAgICAgICAgICAgICAgIGlmIChjaGVja2lmSW5zaWRlU3RhdGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLmxvY2FsaXphdGlvbiA9IHBvcztcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoPElDaXR5W10+Y2hlY2tpZkluc2lkZVN0YXRlKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLnJlbG9hZEN1cnJlbnRTdGF0ZShwb3MpLnRoZW4oKHMpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSkuY2F0Y2goKGVycikgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLnJlbG9hZEN1cnJlbnRTdGF0ZShwb3MpLnRoZW4oKHMpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUocyk7XG4gICAgICAgICAgICAgICAgICAgIH0pLmNhdGNoKChlcnIpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICB9XG5cblxuICAgIGdldFBvc2l0aW9uRnJvbVN0YXRlKHBvczogSUxvY2FsaXphdGlvbiwgU3RhdGU/OiBJc3RhdGUpOiBJQ2l0eVtdIHtcbiAgICAgICAgbGV0IF90aGlzID0gdGhpcztcblxuICAgICAgICAvLyBsaXZlbGxvIG5hemlvbmFsZVxuICAgICAgICBsZXQgYWxscHJvdmluY2VzOiBJQ2l0eVtdID0gX3RoaXMuZ2V0UHJvdmluY2VzRnJvbVN0YXRlKFN0YXRlKTtcblxuICAgICAgICBfLm1hcChhbGxwcm92aW5jZXMsIGZ1bmN0aW9uIChjKSB7XG4gICAgICAgICAgICBjLmRpc3RhbmNlID0gZ2VvLmdldERpc3RhbmNlKHsgbGF0aXR1ZGU6IGMubGF0aXR1ZGUsIGxvbmdpdHVkZTogYy5sb25naXR1ZGUgfSwgcG9zKTtcbiAgICAgICAgfSlcblxuXG4gICAgICAgIGxldCByZXByb3YgPSBfLnRha2UoXy5vcmRlckJ5KGFsbHByb3ZpbmNlcywgWydkaXN0YW5jZSddLCBbJ2FzYyddKSwgMik7XG5cbiAgICAgICAgbGV0IHByb3ZpbmNlcyA9IFtdO1xuICAgICAgICBfLm1hcChyZXByb3YsIGZ1bmN0aW9uIChjOiBJQ2l0eSkge1xuXG4gICAgICAgICAgICBfLm1hcChfdGhpcy5nZXRDaXRpZXNGcm9tUHJvdmluY2VzKGMubmF0aXZlTmFtZSwgU3RhdGUpLCBmdW5jdGlvbiAocCkge1xuICAgICAgICAgICAgICAgIHAuZGlzdGFuY2UgPSBnZW8uZ2V0RGlzdGFuY2UoeyBsYXRpdHVkZTogcC5sYXRpdHVkZSwgbG9uZ2l0dWRlOiBwLmxvbmdpdHVkZSB9LCBwb3MpO1xuICAgICAgICAgICAgICAgIHByb3ZpbmNlcy5wdXNoKHApXG4gICAgICAgICAgICB9KVxuXG4gICAgICAgIH0pXG5cblxuICAgICAgICBsZXQgY2l0aWVzOiBJQ2l0eVtdID0gPElDaXR5W10+Xy50YWtlKF8ub3JkZXJCeShwcm92aW5jZXMsIFsnZGlzdGFuY2UnXSwgWydhc2MnXSksIDEwKTtcblxuXG4gICAgICAgIHJldHVybiBjaXRpZXNcblxuICAgIH1cblxuXG4gICAgZ2V0TG9jYXRpb24obzogeyBjaXR5OiBzdHJpbmcsIHN0YXRlPzogc3RyaW5nIH0pIHtcbiAgICAgICAgcmV0dXJuIHRydWVcblxuICAgIH1cblxuICAgIGdldGluZm8obzogeyBjaXR5OiBzdHJpbmcsIHN0YXRlPzogc3RyaW5nIH0pIHtcbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG5cblxuICAgIGdldFN0YXRlRnJvbUNvdW50cnkocG9zOiBJTG9jYWxpemF0aW9uLCBjb3VudHJ5OiBJQ291bnRyeSk6IElzdGF0ZSB7XG5cbiAgICAgICAgbGV0IHN0YXRlOiBJc3RhdGU7XG5cblxuICAgICAgICBpZiAoY291bnRyeS5zdGF0ZXMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICBzdGF0ZSA9IGNvdW50cnkuc3RhdGVzWzBdXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcInRvZG9cIilcblxuICAgICAgICB9XG5cblxuICAgICAgICByZXR1cm4gc3RhdGVcbiAgICB9XG5cblxuICAgIGdldFN0YXRlcyhwb3M6IElMb2NhbGl6YXRpb24pOiBQcm9taXNlPElzdGF0ZT4ge1xuICAgICAgICBsZXQgX3RoaXMgPSB0aGlzO1xuXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZTxJc3RhdGU+KChyZXNvbHZlLCByZWplY3QpID0+IHtcblxuICAgICAgICAgICAgY29uc3QgY291bnRyeSA9IF90aGlzLmdldENvdW50cnlGcm9tUG9zaXRpb24ocG9zKTtcbiAgICAgICAgICAgIGxldCBleGlzdHM6IGFueSA9IGZhbHNlO1xuXG5cbiAgICAgICAgICAgIGlmIChfdGhpcy5iaWdXb3JsZCkge1xuICAgICAgICAgICAgICAgIF8ubWFwKF90aGlzLmJpZ1dvcmxkLCBmdW5jdGlvbiAoY29udGluZW50KSB7XG5cbiAgICAgICAgICAgICAgICAgICAgXy5tYXAoY29udGluZW50LnN1YmNvbnRpbmVudHMsIGZ1bmN0aW9uIChzdWJjb250aW5lbnQpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgXy5tYXAoc3ViY29udGluZW50LmNvdW50cmllcywgZnVuY3Rpb24gKGMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYy5uYW1lID09PSBjb3VudHJ5Lm5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhpc3RzID0gX3RoaXMuZ2V0U3RhdGVGcm9tQ291bnRyeShwb3MsIGMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICBpZiAoIWV4aXN0cykge1xuICAgICAgICAgICAgICAgICAgICByZWplY3QoXCJubyBjb3VudHJ5XCIpXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShleGlzdHMpXG5cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKF90aGlzLnJlbW90ZSkge1xuXG5cblxuXG5cbiAgICAgICAgICAgICAgICByZWplY3QoXCJubyBjb3VudHJ5XCIpXG5cblxuXG4gICAgICAgICAgICB9IGVsc2UgaWYgKF90aGlzLndvcmxkREIpIHtcbiAgICAgICAgICAgICAgICBsb2FkYkJpZ1dvcmxkZnJvbXJlbW90ZWRiKF90aGlzLndvcmxkREIpLnRoZW4oKHdvcmxkKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIF8ubWFwKHdvcmxkLCBmdW5jdGlvbiAoY29udGluZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfLm1hcChjb250aW5lbnQuc3ViY29udGluZW50cywgZnVuY3Rpb24gKHN1YmNvbnRpbmVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF8ubWFwKHN1YmNvbnRpbmVudC5jb3VudHJpZXMsIGZ1bmN0aW9uIChjKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjLm5hbWUgPT09IGNvdW50cnkubmFtZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhpc3RzID0gX3RoaXMuZ2V0U3RhdGVGcm9tQ291bnRyeShwb3MsIGMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIGlmICghZXhpc3RzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoXCJubyBjb3VudHJ5XCIpXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKGV4aXN0cylcblxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB9KS5jYXRjaCgoZXJyKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnIpXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9KVxuICAgIH1cblxuICAgIGdldFByb3ZpbmNlc0Zyb21TdGF0ZShzdGF0ZT86IElzdGF0ZSk6IElDaXR5W10ge1xuICAgICAgICBsZXQgX3RoaXMgPSB0aGlzO1xuICAgICAgICBsZXQgU3RhdGU6IElzdGF0ZSA9IF90aGlzLnN0YXRlO1xuXG4gICAgICAgIGlmIChzdGF0ZSkgU3RhdGUgPSBzdGF0ZVxuXG5cbiAgICAgICAgbGV0IHByb3ZpbmNlczogSUNpdHlbXSA9IFtdO1xuXG4gICAgICAgIF8ubWFwKFN0YXRlLnJlZ2lvbnMsIGZ1bmN0aW9uIChyKSB7XG4gICAgICAgICAgICBfLm1hcChyLmNpdGllcywgZnVuY3Rpb24gKGMpIHtcbiAgICAgICAgICAgICAgICBwcm92aW5jZXMucHVzaChjKVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfSlcblxuXG4gICAgICAgIHJldHVybiBwcm92aW5jZXNcblxuICAgIH1cblxuICAgIGdldENpdGllc0Zyb21Qcm92aW5jZXMoY2l0eTogc3RyaW5nLCBzdGF0ZT86IElzdGF0ZSk6IElDaXR5W10ge1xuICAgICAgICBsZXQgX3RoaXMgPSB0aGlzO1xuICAgICAgICBsZXQgU3RhdGU6IElzdGF0ZSA9IHRoaXMuc3RhdGU7XG5cbiAgICAgICAgaWYgKHN0YXRlKSBTdGF0ZSA9IHN0YXRlXG5cbiAgICAgICAgbGV0IHByb3ZpbmNlczogSUNpdHlbXSA9IFtdO1xuICAgICAgICBfLm1hcChTdGF0ZS5yZWdpb25zLCBmdW5jdGlvbiAocikge1xuICAgICAgICAgICAgXy5tYXAoci5wcm92aW5jZXMsIGZ1bmN0aW9uIChwKSB7XG4gICAgICAgICAgICAgICAgaWYgKHAubWFpbi5uYXRpdmVOYW1lID09PSBjaXR5KSB7XG4gICAgICAgICAgICAgICAgICAgIF8ubWFwKHAuY2l0aWVzLCBmdW5jdGlvbiAoYykge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBwcm92aW5jZXMucHVzaChjKVxuXG5cbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICB9XG5cblxuICAgICAgICAgICAgfSlcblxuICAgICAgICB9KVxuXG5cbiAgICAgICAgcmV0dXJuIHByb3ZpbmNlc1xuXG4gICAgfVxuXG59Il0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
