"use strict";
var _ = require("lodash");
var geo = require("geolib");
var Promise = require("bluebird");
var superagent = require("superagent");
var w = require("./onlyworld.json");
function loadbBigWorldfromremotedb(url) {
    return new Promise(function (resolve, reject) {
        var bigWorld;
        superagent.get(url).end(function (err, res) {
            if (err || !res.ok) {
                reject(err);
            }
            else {
                bigWorld = res.body.continents;
                resolve(bigWorld);
            }
        });
    });
}
function loadcountryremotely(url, countryName, token) {
    return new Promise(function (resolve, reject) {
        var country;
        if (token) {
            function bearer(request) {
                request.set('Authorization', 'Bearer ' + token);
            }
            superagent.get(url + "/country/" + countryName).use(bearer).end(function (err, res) {
                if (err || !res.ok) {
                    reject(err);
                }
                else {
                    country = res.body;
                    resolve(country);
                }
            });
        }
        else {
            superagent.get(url + "/country/" + countryName).end(function (err, res) {
                if (err || !res.ok) {
                    reject(err);
                }
                else {
                    country = res.body;
                    resolve(country);
                }
            });
        }
    });
}
var Localize = (function () {
    function Localize(o) {
        if (!o)
            throw Error("no conf");
        if (o.bigWorld) {
            this.bigWorld = o.bigWorld;
            this.world = w;
        }
        else {
            if (o.state)
                this.state = o.state;
            if (o && o.world) {
                this.world = o.world;
            }
            else {
                this.world = w;
            }
            if (o && o.remote) {
                this.remote = o.remote;
            }
            else if (o && o.worldDB) {
                this.worldDB = o.worldDB;
            }
        }
    }
    Localize.prototype.getCountryFromPosition = function (o) {
        var pos = { latitude: o.latitude, longitude: o.longitude };
        var _this = this;
        var exists = false;
        var c;
        var centers = [];
        _.map(_this.world, function (continent) {
            _.map(continent.subcontinents, function (subcontinent) {
                _.map(subcontinent.countries, function (country) {
                    _.map(country.boundaries, function (area) {
                        if (!c) {
                            if (typeof area[0][0] !== "object") {
                                if (geo.isPointInside(pos, area)) {
                                    exists = true;
                                    c = country;
                                }
                                else {
                                    centers.push({ nation: country.name, distance: geo.getDistance(geo.getCenterOfBounds(area), pos) });
                                }
                            }
                            else {
                                _.map(area, function (a) {
                                    if (geo.isPointInside(pos, a)) {
                                        exists = true;
                                        c = country;
                                    }
                                    else {
                                        centers.push({ nation: country.name, distance: geo.getDistance(geo.getCenterOfBounds(a), pos) });
                                    }
                                });
                            }
                        }
                    });
                });
            });
        });
        if (!exists) {
            var dist_1 = false;
            _.map(centers, function (co) {
                if (!dist_1 || co.distance < dist_1.distance) {
                    dist_1 = co;
                }
            });
            _.map(_this.world, function (continent) {
                _.map(continent.subcontinents, function (subcontinent) {
                    _.map(subcontinent.countries, function (country) {
                        if (dist_1.nation == country.name) {
                            c = country;
                        }
                    });
                });
            });
        }
        return c;
    };
    Localize.prototype.checkifInsideState = function (pos) {
        var _this = this;
        if (!this.state)
            throw Error("no state set");
        var position = this.getPositionFromState(pos, _this.state);
        if (position[0].distance < 20000) {
            return position;
        }
        else {
            return false;
        }
    };
    Localize.prototype.reloadCurrentState = function (pos, token) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this.getStates(pos, token).then(function (s) {
                _this.localization = pos;
                _this.state = s;
                resolve(_this.getPositionFromState(pos));
            }).catch(function (err) {
                reject(err);
            });
        });
    };
    Localize.prototype.setPosition = function (pos, token) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            if (!(pos && pos.latitude && pos.longitude)) {
                reject("No coords provided");
            }
            else {
                if (_this.state) {
                    var checkifInsideState = _this.checkifInsideState(pos);
                    if (checkifInsideState) {
                        _this.localization = pos;
                        resolve(checkifInsideState);
                    }
                    else {
                        _this.reloadCurrentState(pos, token).then(function (s) {
                            resolve(s);
                        }).catch(function (err) {
                            reject(err);
                        });
                    }
                }
                else {
                    _this.reloadCurrentState(pos, token).then(function (s) {
                        resolve(s);
                    }).catch(function (err) {
                        reject(err);
                    });
                }
            }
        });
    };
    Localize.prototype.getPositionFromState = function (pos, State) {
        var _this = this;
        var allprovinces = _this.getProvincesFromState(State);
        _.map(allprovinces, function (c) {
            c.distance = geo.getDistance({ latitude: c.latitude, longitude: c.longitude }, pos);
        });
        var reprov = _.take(_.orderBy(allprovinces, ['distance'], ['asc']), 2);
        var provinces = [];
        _.map(reprov, function (c) {
            _.map(_this.getCitiesFromProvinces(c.nativeName, State), function (p) {
                p.distance = geo.getDistance({ latitude: p.latitude, longitude: p.longitude }, pos);
                provinces.push(p);
            });
        });
        var cities = _.take(_.orderBy(provinces, ['distance'], ['asc']), 10);
        return cities;
    };
    Localize.prototype.getLocation = function (o) {
        return true;
    };
    Localize.prototype.getinfo = function (o) {
        return true;
    };
    Localize.prototype.getStateFromCountry = function (pos, country) {
        var state;
        if (country.states.length === 1) {
            state = country.states[0];
        }
        else {
            console.log("todo");
        }
        return state;
    };
    Localize.prototype.getFullCountry = function (countryName, token) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            var exists = false;
            if (_this.bigWorld) {
                _.map(_this.bigWorld, function (continent) {
                    _.map(continent.subcontinents, function (subcontinent) {
                        _.map(subcontinent.countries, function (c) {
                            if (c.name === countryName) {
                                exists = c;
                            }
                        });
                    });
                });
                if (!exists) {
                    reject("no country");
                }
                else {
                    resolve(exists);
                }
            }
            else if (_this.remote) {
                loadcountryremotely(_this.remote, countryName, token).then(function (co) {
                    resolve(co);
                }).catch(function (err) {
                    reject(err);
                });
            }
            else if (_this.worldDB) {
                loadbBigWorldfromremotedb(_this.worldDB).then(function (world) {
                    _.map(world, function (continent) {
                        _.map(continent.subcontinents, function (subcontinent) {
                            _.map(subcontinent.countries, function (c) {
                                if (c.name === countryName) {
                                    exists = c;
                                }
                            });
                        });
                    });
                    if (!exists) {
                        reject("no country");
                    }
                    else {
                        resolve(exists);
                    }
                }).catch(function (err) {
                    reject(err);
                });
            }
        });
    };
    Localize.prototype.getStates = function (pos, token) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            var country = _this.getCountryFromPosition(pos);
            _this.getFullCountry(country.name, token).then(function (c) {
                resolve(_this.getStateFromCountry(pos, c));
            }).catch(function (err) {
                reject(err);
            });
        });
    };
    Localize.prototype.getProvincesFromState = function (state) {
        var _this = this;
        var State = _this.state;
        if (state)
            State = state;
        var provinces = [];
        _.map(State.regions, function (r) {
            _.map(r.cities, function (c) {
                provinces.push(c);
            });
        });
        return provinces;
    };
    Localize.prototype.getCitiesFromProvinces = function (city, state) {
        var _this = this;
        var State = this.state;
        if (state)
            State = state;
        var provinces = [];
        _.map(State.regions, function (r) {
            _.map(r.provinces, function (p) {
                if (p.main.nativeName === city) {
                    _.map(p.cities, function (c) {
                        provinces.push(c);
                    });
                }
            });
        });
        return provinces;
    };
    return Localize;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = Localize;

//# sourceMappingURL=data:application/json;base64,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QUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxLQUFLLElBQUksQ0FBQyxDQUFDLENBQUM7b0JBQzdCLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLE1BQU0sRUFBRSxVQUFVLENBQUM7d0JBRXZCLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUE7b0JBR3JCLENBQUMsQ0FBQyxDQUFBO2dCQUNOLENBQUM7WUFHTCxDQUFDLENBQUMsQ0FBQTtRQUVOLENBQUMsQ0FBQyxDQUFBO1FBR0YsTUFBTSxDQUFDLFNBQVMsQ0FBQTtJQUVwQixDQUFDO0lBRUwsZUFBQztBQUFELENBeldBLEFBeVdDLElBQUE7QUF6V0Q7MEJBeVdDLENBQUEiLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBfIGZyb20gXCJsb2Rhc2hcIjtcblxuY29uc3QgZ2VvID0gcmVxdWlyZShcImdlb2xpYlwiKTtcblxuaW1wb3J0ICogYXMgUHJvbWlzZSBmcm9tIFwiYmx1ZWJpcmRcIjtcblxuXG5pbXBvcnQgKiBhcyBzdXBlcmFnZW50IGZyb20gXCJzdXBlcmFnZW50XCI7XG5cblxuaW50ZXJmYWNlIElCb3VuZGFyeSB7IC8vd3JvbmdcbiAgICBsYXRpdHVkZTogbnVtYmVyO1xuICAgIGxvbmdpdHVkZTogbnVtYmVyO1xufVxuXG5pbnRlcmZhY2UgSUdlb2NvZGVzIHtcbiAgICBuYW1lOiBzdHJpbmc7XG4gICAgcHJvdmluY2VzOiBJR2VvW107XG4gICAgY2l0aWVzOiBJQ2l0eVtdO1xufVxuXG5cblxuaW50ZXJmYWNlIElDaXR5IHtcbiAgICBuYXRpdmVOYW1lOiBzdHJpbmc7XG4gICAgbGF0aXR1ZGU6IG51bWJlcjtcbiAgICBsb25naXR1ZGU6IG51bWJlcjtcbiAgICB6aXBjb2RlOiBudW1iZXI7XG4gICAgY2l0eUNvZGU6IHN0cmluZztcbiAgICBzdGF0ZTogc3RyaW5nO1xuICAgIGNvdW50cnk6IHN0cmluZztcbiAgICBpc29MYW5nOiBzdHJpbmc7XG4gICAgdHo6IHN0cmluZztcbiAgICBjdXJyZW5jeTogc3RyaW5nO1xuICAgIGN1cnJlbmN5U3ltYm9sOiBzdHJpbmc7XG4gICAgZGlzdGFuY2U/OiBudW1iZXI7XG4gICAgc3ViY29udGluZW50OiBzdHJpbmc7XG4gICAgY29udGluZW50OiBzdHJpbmc7XG4gICAgcmVnaW9uOiBzdHJpbmc7XG59XG5cbmludGVyZmFjZSBJR2VvIHtcbiAgICBuYXRpdmVOYW1lOiBzdHJpbmc7XG4gICAgemlwY29kZTogc3RyaW5nO1xuICAgIGNpdGllczogSUNpdHlbXTtcbiAgICBtYWluOiBJQ2l0eTtcbiAgICBsYXRpdHVkZTogbnVtYmVyO1xuICAgIGxvbmdpdHVkZTogbnVtYmVyO1xufVxuXG5cbmludGVyZmFjZSBJc3RhdGUge1xuICAgIHJlZ2lvbnM6IElHZW9jb2Rlc1tdO1xuICAgIGJvdW5kYXJpZXM6IElCb3VuZGFyeVtdO1xuICAgIGNhcGl0YWw6IElDaXR5O1xuICAgIG5hdGl2ZU5hbWU6IHN0cmluZztcbiAgICBsYXRsbmc6IG51bWJlcltdO1xuICAgIGlzb0xhbmc6IHN0cmluZ1tdO1xuICAgIG5hbWU6IHN0cmluZztcbiAgICB0ejogc3RyaW5nO1xuICAgIGNvdW50cnk6IHN0cmluZztcbiAgICBzdWJjb250aW5lbnQ6IHN0cmluZztcbiAgICBjb250aW5lbnQ6IHN0cmluZztcbn1cblxuaW50ZXJmYWNlIElDb3VudHJ5IHtcbiAgICBzdGF0ZXM6IElzdGF0ZVtdO1xuICAgIG5hbWU6IHN0cmluZztcbiAgICBib3VuZGFyaWVzOiBJQm91bmRhcnlbXVtdO1xuICAgIG5hdGl2ZU5hbWU6IHN0cmluZztcbiAgICBjYXBpdGFsOiBJQ2l0eTtcbiAgICBjdXJyZW5jaWVzOiBzdHJpbmdbXTtcbiAgICBpc29MYW5nOiBzdHJpbmdbXTtcbiAgICBsYXRsbmc6IG51bWJlcltdO1xuICAgIHR6OiBzdHJpbmc7XG4gICAgc3ViY29udGluZW50OiBzdHJpbmc7XG4gICAgY29udGluZW50OiBzdHJpbmc7XG59XG5cbmludGVyZmFjZSBJU3ViY29udGluZW50IHtcbiAgICBuYW1lOiBzdHJpbmc7XG4gICAgY291bnRyaWVzOiBJQ291bnRyeVtdO1xuICAgIGJvdW5kYXJpZXM6IElCb3VuZGFyeVtdO1xuICAgIGNvbnRpbmVudDogc3RyaW5nO1xufVxuXG5pbnRlcmZhY2UgSUdlb2J1aWxkIHtcbiAgICBuYW1lOiBzdHJpbmc7XG4gICAgc3ViY29udGluZW50czogSVN1YmNvbnRpbmVudFtdO1xuICAgIGJvdW5kYXJpZXM6IElCb3VuZGFyeVtdO1xufVxuXG5cbmludGVyZmFjZSBJTG9jYWxpemF0aW9uIHtcbiAgICBsYXRpdHVkZTogbnVtYmVyO1xuICAgIGxvbmdpdHVkZTogbnVtYmVyO1xufVxuXG5jb25zdCB3OiBJR2VvYnVpbGRbXSA9IHJlcXVpcmUoXCIuL29ubHl3b3JsZC5qc29uXCIpO1xuXG5cbmZ1bmN0aW9uIGxvYWRiQmlnV29ybGRmcm9tcmVtb3RlZGIodXJsKTogUHJvbWlzZTxJR2VvYnVpbGRbXT4ge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZTxJR2VvYnVpbGRbXT4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuXG4gICAgICAgIGxldCBiaWdXb3JsZDogSUdlb2J1aWxkW107XG5cbiAgICAgICAgc3VwZXJhZ2VudC5nZXQodXJsKS5lbmQoZnVuY3Rpb24gKGVyciwgcmVzKSB7XG4gICAgICAgICAgICBpZiAoZXJyIHx8ICFyZXMub2spIHtcblxuICAgICAgICAgICAgICAgIHJlamVjdChlcnIpXG5cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgYmlnV29ybGQgPSByZXMuYm9keS5jb250aW5lbnRzO1xuICAgICAgICAgICAgICAgIHJlc29sdmUoYmlnV29ybGQpXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgfSlcblxufVxuXG5mdW5jdGlvbiBsb2FkY291bnRyeXJlbW90ZWx5KHVybDogc3RyaW5nLCBjb3VudHJ5TmFtZTogc3RyaW5nLCB0b2tlbj86IHN0cmluZyk6IFByb21pc2U8SUNvdW50cnk+IHtcbiAgICByZXR1cm4gbmV3IFByb21pc2U8SUNvdW50cnk+KChyZXNvbHZlLCByZWplY3QpID0+IHtcblxuICAgICAgICBsZXQgY291bnRyeTogSUNvdW50cnk7XG4gICAgICAgIGlmICh0b2tlbikge1xuICAgICAgICAgICAgZnVuY3Rpb24gYmVhcmVyKHJlcXVlc3QpIHtcbiAgICAgICAgICAgICAgICByZXF1ZXN0LnNldCgnQXV0aG9yaXphdGlvbicsICdCZWFyZXIgJyArIHRva2VuKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHN1cGVyYWdlbnQuZ2V0KHVybCArIFwiL2NvdW50cnkvXCIgKyBjb3VudHJ5TmFtZSkudXNlKGJlYXJlcikuZW5kKGZ1bmN0aW9uIChlcnIsIHJlcykge1xuICAgICAgICAgICAgICAgIGlmIChlcnIgfHwgIXJlcy5vaykge1xuICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyKVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNvdW50cnkgPSByZXMuYm9keTtcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShjb3VudHJ5KVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzdXBlcmFnZW50LmdldCh1cmwgKyBcIi9jb3VudHJ5L1wiICsgY291bnRyeU5hbWUpLmVuZChmdW5jdGlvbiAoZXJyLCByZXMpIHtcbiAgICAgICAgICAgICAgICBpZiAoZXJyIHx8ICFyZXMub2spIHtcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycilcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBjb3VudHJ5ID0gcmVzLmJvZHk7XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUoY291bnRyeSlcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG5cbiAgICB9KVxufVxuXG5cblxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBMb2NhbGl6ZSB7XG4gICAgYmlnV29ybGQ6IElHZW9idWlsZFtdO1xuICAgIHN0YXRlOiBJc3RhdGU7XG4gICAgd29ybGQ6IElHZW9idWlsZFtdO1xuICAgIHJlbW90ZTogc3RyaW5nO1xuICAgIHdvcmxkREI6IHN0cmluZztcbiAgICBsb2NhbGl6YXRpb246IElMb2NhbGl6YXRpb247XG5cbiAgICBjb25zdHJ1Y3RvcihvOiB7IHdvcmxkPzogSUdlb2J1aWxkW10sIGJpZ1dvcmxkPzogSUdlb2J1aWxkW10sIHJlbW90ZT86IHN0cmluZywgd29ybGREQj86IHN0cmluZywgc3RhdGU/OiBJc3RhdGUgfSkge1xuICAgICAgICBpZiAoIW8pIHRocm93IEVycm9yKFwibm8gY29uZlwiKTtcblxuXG4gICAgICAgIGlmIChvLmJpZ1dvcmxkKSB7XG4gICAgICAgICAgICB0aGlzLmJpZ1dvcmxkID0gby5iaWdXb3JsZDtcbiAgICAgICAgICAgIHRoaXMud29ybGQgPSB3O1xuXG4gICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgIGlmIChvLnN0YXRlKSB0aGlzLnN0YXRlID0gby5zdGF0ZTtcblxuICAgICAgICAgICAgaWYgKG8gJiYgby53b3JsZCkge1xuICAgICAgICAgICAgICAgIHRoaXMud29ybGQgPSBvLndvcmxkXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMud29ybGQgPSB3XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChvICYmIG8ucmVtb3RlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5yZW1vdGUgPSBvLnJlbW90ZVxuICAgICAgICAgICAgfSBlbHNlIGlmIChvICYmIG8ud29ybGREQikge1xuICAgICAgICAgICAgICAgIHRoaXMud29ybGREQiA9IG8ud29ybGREQlxuICAgICAgICAgICAgfVxuXG5cbiAgICAgICAgfVxuXG4gICAgfVxuXG4gICAgZ2V0Q291bnRyeUZyb21Qb3NpdGlvbihvOiBJTG9jYWxpemF0aW9uKTogSUNvdW50cnkge1xuXG4gICAgICAgIGxldCBwb3M6IElMb2NhbGl6YXRpb24gPSB7IGxhdGl0dWRlOiBvLmxhdGl0dWRlLCBsb25naXR1ZGU6IG8ubG9uZ2l0dWRlIH07XG5cbiAgICAgICAgbGV0IF90aGlzID0gdGhpcztcbiAgICAgICAgbGV0IGV4aXN0cyA9IGZhbHNlO1xuICAgICAgICBsZXQgYzogSUNvdW50cnk7XG4gICAgICAgIGxldCBjZW50ZXJzID0gW107XG5cbiAgICAgICAgXy5tYXAoX3RoaXMud29ybGQsIGZ1bmN0aW9uIChjb250aW5lbnQpIHtcbiAgICAgICAgICAgIF8ubWFwKGNvbnRpbmVudC5zdWJjb250aW5lbnRzLCBmdW5jdGlvbiAoc3ViY29udGluZW50KSB7XG5cbiAgICAgICAgICAgICAgICBfLm1hcChzdWJjb250aW5lbnQuY291bnRyaWVzLCBmdW5jdGlvbiAoY291bnRyeSkge1xuXG4gICAgICAgICAgICAgICAgICAgIF8ubWFwKGNvdW50cnkuYm91bmRhcmllcywgZnVuY3Rpb24gKGFyZWEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghYykge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBhcmVhWzBdWzBdICE9PSBcIm9iamVjdFwiKSB7XG5cblxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChnZW8uaXNQb2ludEluc2lkZShwb3MsIGFyZWEpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleGlzdHMgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYyA9IGNvdW50cnk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNlbnRlcnMucHVzaCh7IG5hdGlvbjogY291bnRyeS5uYW1lLCBkaXN0YW5jZTogZ2VvLmdldERpc3RhbmNlKGdlby5nZXRDZW50ZXJPZkJvdW5kcyhhcmVhKSwgcG9zKSB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfLm1hcChhcmVhLCBmdW5jdGlvbiAoYSkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZ2VvLmlzUG9pbnRJbnNpZGUocG9zLCBhKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4aXN0cyA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYyA9IGNvdW50cnk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2VudGVycy5wdXNoKHsgbmF0aW9uOiBjb3VudHJ5Lm5hbWUsIGRpc3RhbmNlOiBnZW8uZ2V0RGlzdGFuY2UoZ2VvLmdldENlbnRlck9mQm91bmRzKGEpLCBwb3MpIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pXG5cblxuICAgICAgICAgICAgICAgIH0pXG5cbiAgICAgICAgICAgIH0pXG5cbiAgICAgICAgfSlcblxuICAgICAgICBpZiAoIWV4aXN0cykge1xuICAgICAgICAgICAgbGV0IGRpc3Q6IGFueSA9IGZhbHNlO1xuICAgICAgICAgICAgXy5tYXAoY2VudGVycywgZnVuY3Rpb24gKGNvKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFkaXN0IHx8IGNvLmRpc3RhbmNlIDwgZGlzdC5kaXN0YW5jZSkge1xuICAgICAgICAgICAgICAgICAgICBkaXN0ID0gY29cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH0pXG5cbiAgICAgICAgICAgIF8ubWFwKF90aGlzLndvcmxkLCBmdW5jdGlvbiAoY29udGluZW50KSB7XG4gICAgICAgICAgICAgICAgXy5tYXAoY29udGluZW50LnN1YmNvbnRpbmVudHMsIGZ1bmN0aW9uIChzdWJjb250aW5lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgXy5tYXAoc3ViY29udGluZW50LmNvdW50cmllcywgZnVuY3Rpb24gKGNvdW50cnkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkaXN0Lm5hdGlvbiA9PSBjb3VudHJ5Lm5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjID0gY291bnRyeVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9KVxuXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNcbiAgICB9XG5cblxuICAgIGNoZWNraWZJbnNpZGVTdGF0ZShwb3M6IElMb2NhbGl6YXRpb24pOiBJQ2l0eVtdIHwgYm9vbGVhbiB7XG4gICAgICAgIGxldCBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGlmICghdGhpcy5zdGF0ZSkgdGhyb3cgRXJyb3IoXCJubyBzdGF0ZSBzZXRcIik7XG5cbiAgICAgICAgbGV0IHBvc2l0aW9uID0gdGhpcy5nZXRQb3NpdGlvbkZyb21TdGF0ZShwb3MsIF90aGlzLnN0YXRlKTtcblxuICAgICAgICBpZiAocG9zaXRpb25bMF0uZGlzdGFuY2UgPCAyMDAwMCkge1xuICAgICAgICAgICAgcmV0dXJuIHBvc2l0aW9uXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgfVxuICAgIH1cblxuXG4gICAgcmVsb2FkQ3VycmVudFN0YXRlKHBvczogSUxvY2FsaXphdGlvbix0b2tlbj86c3RyaW5nKSB7IC8vdG9kb1xuICAgICAgICBsZXQgX3RoaXMgPSB0aGlzO1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2U8SUNpdHlbXT4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuXG4gICAgICAgICAgICBfdGhpcy5nZXRTdGF0ZXMocG9zLHRva2VuKS50aGVuKChzKSA9PiB7XG4gICAgICAgICAgICAgICAgX3RoaXMubG9jYWxpemF0aW9uID0gcG9zO1xuICAgICAgICAgICAgICAgIF90aGlzLnN0YXRlID0gcztcbiAgICAgICAgICAgICAgICByZXNvbHZlKF90aGlzLmdldFBvc2l0aW9uRnJvbVN0YXRlKHBvcykpO1xuICAgICAgICAgICAgfSkuY2F0Y2goKGVycikgPT4ge1xuICAgICAgICAgICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICAgICAgfSlcblxuXG5cbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICBzZXRQb3NpdGlvbihwb3M6IElMb2NhbGl6YXRpb24sdG9rZW4/OnN0cmluZyk6IFByb21pc2U8SUNpdHlbXT4ge1xuICAgICAgICBsZXQgX3RoaXMgPSB0aGlzO1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2U8SUNpdHlbXT4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgaWYgKCEocG9zICYmIHBvcy5sYXRpdHVkZSAmJiBwb3MubG9uZ2l0dWRlKSkge1xuICAgICAgICAgICAgICAgIHJlamVjdChcIk5vIGNvb3JkcyBwcm92aWRlZFwiKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgICAgICBpZiAoX3RoaXMuc3RhdGUpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY2hlY2tpZkluc2lkZVN0YXRlID0gX3RoaXMuY2hlY2tpZkluc2lkZVN0YXRlKHBvcylcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNoZWNraWZJbnNpZGVTdGF0ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMubG9jYWxpemF0aW9uID0gcG9zO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSg8SUNpdHlbXT5jaGVja2lmSW5zaWRlU3RhdGUpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMucmVsb2FkQ3VycmVudFN0YXRlKHBvcyx0b2tlbikudGhlbigocykgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUocyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KS5jYXRjaCgoZXJyKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMucmVsb2FkQ3VycmVudFN0YXRlKHBvcyx0b2tlbikudGhlbigocykgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShzKTtcbiAgICAgICAgICAgICAgICAgICAgfSkuY2F0Y2goKGVycikgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KVxuICAgIH1cblxuXG5cbiAgICBnZXRQb3NpdGlvbkZyb21TdGF0ZShwb3M6IElMb2NhbGl6YXRpb24sIFN0YXRlPzogSXN0YXRlKTogSUNpdHlbXSB7XG4gICAgICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICAgICAgLy8gbGl2ZWxsbyBuYXppb25hbGVcbiAgICAgICAgbGV0IGFsbHByb3ZpbmNlczogSUNpdHlbXSA9IF90aGlzLmdldFByb3ZpbmNlc0Zyb21TdGF0ZShTdGF0ZSk7XG5cbiAgICAgICAgXy5tYXAoYWxscHJvdmluY2VzLCBmdW5jdGlvbiAoYykge1xuICAgICAgICAgICAgYy5kaXN0YW5jZSA9IGdlby5nZXREaXN0YW5jZSh7IGxhdGl0dWRlOiBjLmxhdGl0dWRlLCBsb25naXR1ZGU6IGMubG9uZ2l0dWRlIH0sIHBvcyk7XG4gICAgICAgIH0pXG5cblxuICAgICAgICBsZXQgcmVwcm92ID0gXy50YWtlKF8ub3JkZXJCeShhbGxwcm92aW5jZXMsIFsnZGlzdGFuY2UnXSwgWydhc2MnXSksIDIpO1xuXG4gICAgICAgIGxldCBwcm92aW5jZXMgPSBbXTtcbiAgICAgICAgXy5tYXAocmVwcm92LCBmdW5jdGlvbiAoYzogSUNpdHkpIHtcblxuICAgICAgICAgICAgXy5tYXAoX3RoaXMuZ2V0Q2l0aWVzRnJvbVByb3ZpbmNlcyhjLm5hdGl2ZU5hbWUsIFN0YXRlKSwgZnVuY3Rpb24gKHApIHtcbiAgICAgICAgICAgICAgICBwLmRpc3RhbmNlID0gZ2VvLmdldERpc3RhbmNlKHsgbGF0aXR1ZGU6IHAubGF0aXR1ZGUsIGxvbmdpdHVkZTogcC5sb25naXR1ZGUgfSwgcG9zKTtcbiAgICAgICAgICAgICAgICBwcm92aW5jZXMucHVzaChwKVxuICAgICAgICAgICAgfSlcblxuICAgICAgICB9KVxuXG5cbiAgICAgICAgbGV0IGNpdGllczogSUNpdHlbXSA9IDxJQ2l0eVtdPl8udGFrZShfLm9yZGVyQnkocHJvdmluY2VzLCBbJ2Rpc3RhbmNlJ10sIFsnYXNjJ10pLCAxMCk7XG5cblxuICAgICAgICByZXR1cm4gY2l0aWVzXG5cbiAgICB9XG5cblxuICAgIGdldExvY2F0aW9uKG86IHsgY2l0eTogc3RyaW5nLCBzdGF0ZT86IHN0cmluZyB9KSB7XG4gICAgICAgIHJldHVybiB0cnVlXG5cbiAgICB9XG5cbiAgICBnZXRpbmZvKG86IHsgY2l0eTogc3RyaW5nLCBzdGF0ZT86IHN0cmluZyB9KSB7XG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuXG5cbiAgICBnZXRTdGF0ZUZyb21Db3VudHJ5KHBvczogSUxvY2FsaXphdGlvbiwgY291bnRyeTogSUNvdW50cnkpOiBJc3RhdGUge1xuXG4gICAgICAgIGxldCBzdGF0ZTogSXN0YXRlO1xuXG5cbiAgICAgICAgaWYgKGNvdW50cnkuc3RhdGVzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgc3RhdGUgPSBjb3VudHJ5LnN0YXRlc1swXVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJ0b2RvXCIpXG5cbiAgICAgICAgfVxuXG5cbiAgICAgICAgcmV0dXJuIHN0YXRlXG4gICAgfVxuXG5cbiAgICBnZXRGdWxsQ291bnRyeShjb3VudHJ5TmFtZTogc3RyaW5nLCB0b2tlbj86IHN0cmluZykge1xuICAgICAgICBsZXQgX3RoaXMgPSB0aGlzO1xuXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZTxJQ291bnRyeT4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuXG4gICAgICAgICAgICBsZXQgZXhpc3RzOiBhbnkgPSBmYWxzZTtcblxuXG4gICAgICAgICAgICBpZiAoX3RoaXMuYmlnV29ybGQpIHtcbiAgICAgICAgICAgICAgICBfLm1hcChfdGhpcy5iaWdXb3JsZCwgZnVuY3Rpb24gKGNvbnRpbmVudCkge1xuXG4gICAgICAgICAgICAgICAgICAgIF8ubWFwKGNvbnRpbmVudC5zdWJjb250aW5lbnRzLCBmdW5jdGlvbiAoc3ViY29udGluZW50KSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIF8ubWFwKHN1YmNvbnRpbmVudC5jb3VudHJpZXMsIGZ1bmN0aW9uIChjKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGMubmFtZSA9PT0gY291bnRyeU5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhpc3RzID0gYztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgaWYgKCFleGlzdHMpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KFwibm8gY291bnRyeVwiKVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUoZXhpc3RzKVxuXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmIChfdGhpcy5yZW1vdGUpIHtcblxuICAgICAgICAgICAgICAgIGxvYWRjb3VudHJ5cmVtb3RlbHkoX3RoaXMucmVtb3RlLCBjb3VudHJ5TmFtZSwgdG9rZW4pLnRoZW4oKGNvKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUoY28pXG4gICAgICAgICAgICAgICAgfSkuY2F0Y2goKGVycikgPT4ge1xuICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyKVxuICAgICAgICAgICAgICAgIH0pXG5cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoX3RoaXMud29ybGREQikge1xuICAgICAgICAgICAgICAgIGxvYWRiQmlnV29ybGRmcm9tcmVtb3RlZGIoX3RoaXMud29ybGREQikudGhlbigod29ybGQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgXy5tYXAod29ybGQsIGZ1bmN0aW9uIChjb250aW5lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF8ubWFwKGNvbnRpbmVudC5zdWJjb250aW5lbnRzLCBmdW5jdGlvbiAoc3ViY29udGluZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXy5tYXAoc3ViY29udGluZW50LmNvdW50cmllcywgZnVuY3Rpb24gKGMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGMubmFtZSA9PT0gY291bnRyeU5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4aXN0cyA9IGM7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFleGlzdHMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChcIm5vIGNvdW50cnlcIilcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoZXhpc3RzKVxuXG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIH0pLmNhdGNoKChlcnIpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycilcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH0pXG4gICAgfVxuXG5cbiAgICBnZXRTdGF0ZXMocG9zOiBJTG9jYWxpemF0aW9uLHRva2VuPzpzdHJpbmcpOiBQcm9taXNlPElzdGF0ZT4ge1xuICAgICAgICBsZXQgX3RoaXMgPSB0aGlzO1xuXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZTxJc3RhdGU+KChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGNvdW50cnkgPSBfdGhpcy5nZXRDb3VudHJ5RnJvbVBvc2l0aW9uKHBvcyk7XG5cbiAgICAgICAgICAgIF90aGlzLmdldEZ1bGxDb3VudHJ5KGNvdW50cnkubmFtZSx0b2tlbikudGhlbigoYykgPT4ge1xuICAgICAgICAgICAgICAgIHJlc29sdmUoX3RoaXMuZ2V0U3RhdGVGcm9tQ291bnRyeShwb3MsIGMpKVxuICAgICAgICAgICAgfSkuY2F0Y2goKGVycikgPT4ge1xuICAgICAgICAgICAgICAgIHJlamVjdChlcnIpXG4gICAgICAgICAgICB9KVxuICAgICAgICB9KVxuICAgIH1cblxuICAgIGdldFByb3ZpbmNlc0Zyb21TdGF0ZShzdGF0ZT86IElzdGF0ZSk6IElDaXR5W10ge1xuICAgICAgICBsZXQgX3RoaXMgPSB0aGlzO1xuICAgICAgICBsZXQgU3RhdGU6IElzdGF0ZSA9IF90aGlzLnN0YXRlO1xuXG4gICAgICAgIGlmIChzdGF0ZSkgU3RhdGUgPSBzdGF0ZVxuXG5cbiAgICAgICAgbGV0IHByb3ZpbmNlczogSUNpdHlbXSA9IFtdO1xuXG4gICAgICAgIF8ubWFwKFN0YXRlLnJlZ2lvbnMsIGZ1bmN0aW9uIChyKSB7XG4gICAgICAgICAgICBfLm1hcChyLmNpdGllcywgZnVuY3Rpb24gKGMpIHtcbiAgICAgICAgICAgICAgICBwcm92aW5jZXMucHVzaChjKVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfSlcblxuXG4gICAgICAgIHJldHVybiBwcm92aW5jZXNcblxuICAgIH1cblxuICAgIGdldENpdGllc0Zyb21Qcm92aW5jZXMoY2l0eTogc3RyaW5nLCBzdGF0ZT86IElzdGF0ZSk6IElDaXR5W10ge1xuICAgICAgICBsZXQgX3RoaXMgPSB0aGlzO1xuICAgICAgICBsZXQgU3RhdGU6IElzdGF0ZSA9IHRoaXMuc3RhdGU7XG5cbiAgICAgICAgaWYgKHN0YXRlKSBTdGF0ZSA9IHN0YXRlXG5cbiAgICAgICAgbGV0IHByb3ZpbmNlczogSUNpdHlbXSA9IFtdO1xuICAgICAgICBfLm1hcChTdGF0ZS5yZWdpb25zLCBmdW5jdGlvbiAocikge1xuICAgICAgICAgICAgXy5tYXAoci5wcm92aW5jZXMsIGZ1bmN0aW9uIChwKSB7XG4gICAgICAgICAgICAgICAgaWYgKHAubWFpbi5uYXRpdmVOYW1lID09PSBjaXR5KSB7XG4gICAgICAgICAgICAgICAgICAgIF8ubWFwKHAuY2l0aWVzLCBmdW5jdGlvbiAoYykge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBwcm92aW5jZXMucHVzaChjKVxuXG5cbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICB9XG5cblxuICAgICAgICAgICAgfSlcblxuICAgICAgICB9KVxuXG5cbiAgICAgICAgcmV0dXJuIHByb3ZpbmNlc1xuXG4gICAgfVxuXG59Il0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
