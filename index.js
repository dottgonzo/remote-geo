"use strict";
var _ = require("lodash");
var geo = require("geolib");
var Promise = require("bluebird");
var superagent = require("superagent");
var w = require("./onlyworld.json");
function loadbBigWorldfromremotedb(url) {
    return new Promise(function (resolve, reject) {
        var bigWorld;
        superagent.get(url).end(function (err, res) {
            if (err || !res.ok) {
                reject(err);
            }
            else {
                bigWorld = res.body.continents;
                resolve(bigWorld);
            }
        });
    });
}
function loadcontryremotely(url, countryName) {
    return new Promise(function (resolve, reject) {
        var country;
        superagent.get(url + "/country/" + countryName).end(function (err, res) {
            if (err || !res.ok) {
                reject(err);
            }
            else {
                country = res.body;
                resolve(country);
            }
        });
    });
}
var Localize = (function () {
    function Localize(o) {
        if (!o)
            throw Error("no conf");
        if (o.bigWorld) {
            this.bigWorld = o.bigWorld;
            this.world = w;
        }
        else {
            if (o.state)
                this.state = o.state;
            if (o && o.world) {
                this.world = o.world;
            }
            else {
                this.world = w;
            }
            if (o && o.remote) {
                this.remote = o.remote;
            }
            else if (o && o.worldDB) {
                this.worldDB = o.worldDB;
            }
        }
    }
    Localize.prototype.getCountryFromPosition = function (o) {
        var pos = { latitude: o.latitude, longitude: o.longitude };
        var _this = this;
        var exists = false;
        var c;
        var centers = [];
        _.map(_this.world, function (continent) {
            _.map(continent.subcontinents, function (subcontinent) {
                _.map(subcontinent.countries, function (country) {
                    _.map(country.boundaries, function (area) {
                        if (!c) {
                            if (typeof area[0][0] !== "object") {
                                if (geo.isPointInside(pos, area)) {
                                    exists = true;
                                    c = country;
                                }
                                else {
                                    centers.push({ nation: country.name, distance: geo.getDistance(geo.getCenterOfBounds(area), pos) });
                                }
                            }
                            else {
                                _.map(area, function (a) {
                                    if (geo.isPointInside(pos, a)) {
                                        exists = true;
                                        c = country;
                                    }
                                    else {
                                        centers.push({ nation: country.name, distance: geo.getDistance(geo.getCenterOfBounds(a), pos) });
                                    }
                                });
                            }
                        }
                    });
                });
            });
        });
        if (!exists) {
            var dist_1 = false;
            _.map(centers, function (co) {
                if (!dist_1 || co.distance < dist_1.distance) {
                    dist_1 = co;
                }
            });
            _.map(_this.world, function (continent) {
                _.map(continent.subcontinents, function (subcontinent) {
                    _.map(subcontinent.countries, function (country) {
                        if (dist_1.nation == country.name) {
                            c = country;
                        }
                    });
                });
            });
        }
        return c;
    };
    Localize.prototype.checkifInsideState = function (pos) {
        var _this = this;
        if (!this.state)
            throw Error("no state set");
        var position = this.getPositionFromState(pos, _this.state);
        if (position[0].distance < 20000) {
            return position;
        }
        else {
            return false;
        }
    };
    Localize.prototype.reloadCurrentState = function (pos) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this.getStates(pos).then(function (s) {
                _this.localization = pos;
                _this.state = s;
                resolve(_this.getPositionFromState(pos));
            }).catch(function (err) {
                reject(err);
            });
        });
    };
    Localize.prototype.setPosition = function (pos) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            if (!(pos && pos.latitude && pos.longitude)) {
                reject("No coords provided");
            }
            else {
                if (_this.state) {
                    var checkifInsideState = _this.checkifInsideState(pos);
                    if (checkifInsideState) {
                        _this.localization = pos;
                        resolve(checkifInsideState);
                    }
                    else {
                        _this.reloadCurrentState(pos).then(function (s) {
                            resolve(s);
                        }).catch(function (err) {
                            reject(err);
                        });
                    }
                }
                else {
                    _this.reloadCurrentState(pos).then(function (s) {
                        resolve(s);
                    }).catch(function (err) {
                        reject(err);
                    });
                }
            }
        });
    };
    Localize.prototype.getPositionFromState = function (pos, State) {
        var _this = this;
        var allprovinces = _this.getProvincesFromState(State);
        _.map(allprovinces, function (c) {
            c.distance = geo.getDistance({ latitude: c.latitude, longitude: c.longitude }, pos);
        });
        var reprov = _.take(_.orderBy(allprovinces, ['distance'], ['asc']), 2);
        var provinces = [];
        _.map(reprov, function (c) {
            _.map(_this.getCitiesFromProvinces(c.nativeName, State), function (p) {
                p.distance = geo.getDistance({ latitude: p.latitude, longitude: p.longitude }, pos);
                provinces.push(p);
            });
        });
        var cities = _.take(_.orderBy(provinces, ['distance'], ['asc']), 10);
        return cities;
    };
    Localize.prototype.getLocation = function (o) {
        return true;
    };
    Localize.prototype.getinfo = function (o) {
        return true;
    };
    Localize.prototype.getStateFromCountry = function (pos, country) {
        var state;
        if (country.states.length === 1) {
            state = country.states[0];
        }
        else {
            console.log("todo");
        }
        return state;
    };
    Localize.prototype.getFullCountry = function (countryName) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            var exists = false;
            if (_this.bigWorld) {
                _.map(_this.bigWorld, function (continent) {
                    _.map(continent.subcontinents, function (subcontinent) {
                        _.map(subcontinent.countries, function (c) {
                            if (c.name === countryName) {
                                exists = c;
                            }
                        });
                    });
                });
                if (!exists) {
                    reject("no country");
                }
                else {
                    resolve(exists);
                }
            }
            else if (_this.remote) {
                loadcontryremotely(_this.remote, countryName).then(function (co) {
                    resolve(co);
                }).catch(function (err) {
                    reject(err);
                });
            }
            else if (_this.worldDB) {
                loadbBigWorldfromremotedb(_this.worldDB).then(function (world) {
                    _.map(world, function (continent) {
                        _.map(continent.subcontinents, function (subcontinent) {
                            _.map(subcontinent.countries, function (c) {
                                if (c.name === countryName) {
                                    exists = c;
                                }
                            });
                        });
                    });
                    if (!exists) {
                        reject("no country");
                    }
                    else {
                        resolve(exists);
                    }
                }).catch(function (err) {
                    reject(err);
                });
            }
        });
    };
    Localize.prototype.getStates = function (pos) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            var country = _this.getCountryFromPosition(pos);
            _this.getFullCountry(country.name).then(function (c) {
                resolve(_this.getStateFromCountry(pos, c));
            }).catch(function (err) {
                reject(err);
            });
        });
    };
    Localize.prototype.getProvincesFromState = function (state) {
        var _this = this;
        var State = _this.state;
        if (state)
            State = state;
        var provinces = [];
        _.map(State.regions, function (r) {
            _.map(r.cities, function (c) {
                provinces.push(c);
            });
        });
        return provinces;
    };
    Localize.prototype.getCitiesFromProvinces = function (city, state) {
        var _this = this;
        var State = this.state;
        if (state)
            State = state;
        var provinces = [];
        _.map(State.regions, function (r) {
            _.map(r.provinces, function (p) {
                if (p.main.nativeName === city) {
                    _.map(p.cities, function (c) {
                        provinces.push(c);
                    });
                }
            });
        });
        return provinces;
    };
    return Localize;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = Localize;

//# sourceMappingURL=data:application/json;base64,
