"use strict";
var _ = require("lodash");
var geo = require("geolib");
var Localize = (function () {
    function Localize(word) {
        if (word)
            this.loadWorld(word);
    }
    Localize.prototype.loadWorld = function (word) {
    };
    Localize.prototype.getPosition = function (o) {
        if (!(o && o.latitude && o.longitude))
            throw Error("Error");
        var pos = { latitude: o.latitude, longitude: o.longitude };
        var _this = this;
        var State;
        if (o.state && _this.getState(o.state)) {
            State = _this.getState(o.state);
            console.log('ss');
        }
        else {
            console.log('todo');
            throw Error("todo");
        }
        var allprovinces = _this.getProvincesFromState(State.name);
        _.map(allprovinces, function (c) {
            c.distance = geo.getDistance({ latitude: c.latitude, longitude: c.longitude }, pos);
        });
        var reprov = _.take(_.orderBy(allprovinces, ['distance'], ['asc']), 2);
        var provinces = [];
        _.map(reprov, function (c) {
            _.map(_this.getCitiesFromProvinces(c.nativeName, State.name), function (p) {
                p.distance = geo.getDistance({ latitude: p.latitude, longitude: p.longitude }, pos);
                provinces.push(p);
            });
        });
        var cities = _.take(_.orderBy(provinces, ['distance'], ['asc']), 2);
        if (cities[0].distance * 1.4 > cities[0].distance) {
            cities = [cities[0]];
        }
        return cities;
    };
    Localize.prototype.getLocation = function (o) {
        return true;
    };
    Localize.prototype.getinfo = function (o) {
        return true;
    };
    Localize.prototype.getState = function (state, o) {
        var exists = false;
        var answer;
        var _this = this;
        if (!_this.world) {
            console.error("no world");
            return false;
        }
        _.map(_this.world, function (continent) {
            _.map(continent.subcontinents, function (subcontinent) {
                _.map(subcontinent.countries, function (country) {
                    _.map(country.states, function (s) {
                        console.log(s.name);
                        if (s.name === state) {
                            exists = true;
                            answer = s;
                        }
                    });
                    if (!exists) {
                        answer = false;
                    }
                });
            });
        });
        return answer;
    };
    Localize.prototype.getProvincesFromState = function (state) {
        var _this = this;
        var State;
        if (state) {
            State = _this.getState(state);
        }
        else {
            throw Error("todo");
        }
        var provinces = [];
        _.map(State.regions, function (r) {
            _.map(r.cities, function (c) {
                provinces.push(c);
            });
        });
        return provinces;
    };
    Localize.prototype.getCitiesFromProvinces = function (city, state) {
        var _this = this;
        var State;
        if (state) {
            State = _this.getState(state);
        }
        else {
            throw Error("todo");
        }
        var provinces = [];
        _.map(State.regions, function (r) {
            _.map(r.provinces, function (p) {
                if (p.main.nativeName === city) {
                    _.map(p.cities, function (c) {
                        provinces.push(c);
                    });
                }
            });
        });
        return provinces;
    };
    return Localize;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = Localize;

//# sourceMappingURL=data:application/json;base64,
