"use strict";
var _ = require("lodash");
var geo = require("geolib");
var Promise = require("bluebird");
var superagent = require("superagent");
var w = require("./onlyworld.json");
function loadbBigWorldfromremotedb(url) {
    return new Promise(function (resolve, reject) {
        var bigWorld;
        superagent.get(url).end(function (err, res) {
            if (err || !res.ok) {
                reject(err);
            }
            else {
                bigWorld = res.body.continents;
                resolve(bigWorld);
            }
        });
    });
}
function loadcontryremotely(url, countryName) {
    return new Promise(function (resolve, reject) {
        var country;
        superagent.post(url).send({ countryname: countryName }).end(function (err, res) {
            if (err || !res.ok) {
                reject(err);
            }
            else {
                country = res.body;
                resolve(country);
            }
        });
    });
}
var Localize = (function () {
    function Localize(o) {
        if (!o)
            throw Error("no conf");
        if (o.bigWorld) {
            this.bigWorld = o.bigWorld;
            this.world = w;
        }
        else {
            if (o.state)
                this.state = o.state;
            if (o && o.world) {
                this.world = o.world;
            }
            else {
                this.world = w;
            }
            if (o && o.remote) {
                this.remote = o.remote;
            }
            else if (o && o.worldDB) {
                this.worldDB = o.worldDB;
            }
        }
    }
    Localize.prototype.getCountryFromPosition = function (o) {
        var pos = { latitude: o.latitude, longitude: o.longitude };
        var _this = this;
        var exists = false;
        var c;
        var centers = [];
        _.map(_this.world, function (continent) {
            _.map(continent.subcontinents, function (subcontinent) {
                _.map(subcontinent.countries, function (country) {
                    _.map(country.boundaries, function (area) {
                        if (!c) {
                            if (typeof area[0][0] !== "object") {
                                if (geo.isPointInside(pos, area)) {
                                    exists = true;
                                    c = country;
                                }
                                else {
                                    centers.push({ nation: country.name, distance: geo.getDistance(geo.getCenterOfBounds(area), pos) });
                                }
                            }
                            else {
                                _.map(area, function (a) {
                                    if (geo.isPointInside(pos, a)) {
                                        exists = true;
                                        c = country;
                                    }
                                    else {
                                        centers.push({ nation: country.name, distance: geo.getDistance(geo.getCenterOfBounds(a), pos) });
                                    }
                                });
                            }
                        }
                    });
                });
            });
        });
        if (!exists) {
            var dist_1 = false;
            _.map(centers, function (co) {
                if (!dist_1 || co.distance < dist_1.distance) {
                    dist_1 = co;
                }
            });
            _.map(_this.world, function (continent) {
                _.map(continent.subcontinents, function (subcontinent) {
                    _.map(subcontinent.countries, function (country) {
                        if (dist_1.nation == country.name) {
                            c = country;
                        }
                    });
                });
            });
        }
        return c;
    };
    Localize.prototype.checkifInsideState = function (pos) {
        var _this = this;
        if (!this.state)
            throw Error("no state set");
        var position = this.getPositionFromState(pos, _this.state);
        if (position[0].distance < 20000) {
            return position;
        }
        else {
            return false;
        }
    };
    Localize.prototype.reloadCurrentState = function (o) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this.getStates(o).then(function (s) {
                _this.state = s;
                resolve(true);
            }).catch(function (err) {
                reject(err);
            });
        });
    };
    Localize.prototype.setPosition = function (pos) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            if (!(pos && pos.latitude && pos.longitude)) {
                reject("No coords provided");
            }
            else {
                function reload() {
                    _this.reloadCurrentState(pos).then(function () {
                        _this.localization = pos;
                        resolve(_this.getPositionFromState(pos));
                    }).catch(function (err) {
                        reject(err);
                    });
                }
                if (_this.state) {
                    var checkifInsideState = _this.checkifInsideState(pos);
                    if (checkifInsideState) {
                        resolve(checkifInsideState);
                    }
                    else {
                        reload();
                    }
                }
                else {
                    reload();
                }
            }
        });
    };
    Localize.prototype.getPositionFromState = function (pos, State) {
        var _this = this;
        var allprovinces = _this.getProvincesFromState(State);
        _.map(allprovinces, function (c) {
            c.distance = geo.getDistance({ latitude: c.latitude, longitude: c.longitude }, pos);
        });
        var reprov = _.take(_.orderBy(allprovinces, ['distance'], ['asc']), 2);
        var provinces = [];
        _.map(reprov, function (c) {
            _.map(_this.getCitiesFromProvinces(c.nativeName, State), function (p) {
                p.distance = geo.getDistance({ latitude: p.latitude, longitude: p.longitude }, pos);
                provinces.push(p);
            });
        });
        var cities = _.take(_.orderBy(provinces, ['distance'], ['asc']), 2);
        if (cities[0].distance * 1.4 > cities[0].distance) {
            cities = [cities[0]];
        }
        return cities;
    };
    Localize.prototype.getLocation = function (o) {
        return true;
    };
    Localize.prototype.getinfo = function (o) {
        return true;
    };
    Localize.prototype.getStateFromCountry = function (pos, country) {
        var state;
        if (country.states.length === 1) {
            state = country.states[0];
        }
        else {
            console.log("todo");
        }
        return state;
    };
    Localize.prototype.getStates = function (pos) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            var country = _this.getCountryFromPosition(pos);
            if (_this.bigWorld) {
                _.map(_this.bigWorld, function (continent) {
                    _.map(continent.subcontinents, function (subcontinent) {
                        _.map(subcontinent.countries, function (c) {
                            if (c.name === country.name) {
                                resolve(_this.getStateFromCountry(pos, c));
                            }
                        });
                    });
                });
            }
            else if (_this.remote) {
            }
            else if (_this.worldDB) {
                loadbBigWorldfromremotedb(_this.worldDB).then(function (world) {
                    _.map(world, function (continent) {
                        _.map(continent.subcontinents, function (subcontinent) {
                            _.map(subcontinent.countries, function (c) {
                                if (c.name === country.name) {
                                    resolve(_this.getStateFromCountry(pos, c));
                                }
                            });
                        });
                    });
                });
            }
        });
    };
    Localize.prototype.getProvincesFromState = function (state) {
        var _this = this;
        var State = _this.state;
        if (state)
            State = state;
        var provinces = [];
        _.map(State.regions, function (r) {
            _.map(r.cities, function (c) {
                provinces.push(c);
            });
        });
        return provinces;
    };
    Localize.prototype.getCitiesFromProvinces = function (city, state) {
        var _this = this;
        var State = this.state;
        if (state)
            State = state;
        var provinces = [];
        _.map(State.regions, function (r) {
            _.map(r.provinces, function (p) {
                if (p.main.nativeName === city) {
                    _.map(p.cities, function (c) {
                        provinces.push(c);
                    });
                }
            });
        });
        return provinces;
    };
    return Localize;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = Localize;

//# sourceMappingURL=data:application/json;base64,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Q0FBc0IsR0FBdEIsVUFBdUIsSUFBWSxFQUFFLEtBQWM7UUFDL0MsSUFBSSxLQUFLLEdBQUcsSUFBSSxDQUFDO1FBQ2pCLElBQUksS0FBSyxHQUFXLElBQUksQ0FBQyxLQUFLLENBQUM7UUFFL0IsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDO1lBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQTtRQUV4QixJQUFJLFNBQVMsR0FBWSxFQUFFLENBQUM7UUFDNUIsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLFVBQVUsQ0FBQztZQUM1QixDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxTQUFTLEVBQUUsVUFBVSxDQUFDO2dCQUMxQixFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsS0FBSyxJQUFJLENBQUMsQ0FBQyxDQUFDO29CQUM3QixDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxNQUFNLEVBQUUsVUFBVSxDQUFDO3dCQUV2QixTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFBO29CQUdyQixDQUFDLENBQUMsQ0FBQTtnQkFDTixDQUFDO1lBR0wsQ0FBQyxDQUFDLENBQUE7UUFFTixDQUFDLENBQUMsQ0FBQTtRQUdGLE1BQU0sQ0FBQyxTQUFTLENBQUE7SUFFcEIsQ0FBQztJQUVMLGVBQUM7QUFBRCxDQWxWQSxBQWtWQyxJQUFBO0FBbFZEOzBCQWtWQyxDQUFBIiwiZmlsZSI6ImluZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgXyBmcm9tIFwibG9kYXNoXCI7XG5cbmNvbnN0IGdlbyA9IHJlcXVpcmUoXCJnZW9saWJcIik7XG5cbmltcG9ydCAqIGFzIFByb21pc2UgZnJvbSBcImJsdWViaXJkXCI7XG5cblxuaW1wb3J0ICogYXMgc3VwZXJhZ2VudCBmcm9tIFwic3VwZXJhZ2VudFwiO1xuXG5cbmludGVyZmFjZSBJQm91bmRhcnkgeyAvL3dyb25nXG4gICAgbGF0aXR1ZGU6IG51bWJlcjtcbiAgICBsb25naXR1ZGU6IG51bWJlcjtcbn1cblxuaW50ZXJmYWNlIElHZW9jb2RlcyB7XG4gICAgbmFtZTogc3RyaW5nO1xuICAgIHByb3ZpbmNlczogSUdlb1tdO1xuICAgIGNpdGllczogSUNpdHlbXTtcbn1cblxuXG5cbmludGVyZmFjZSBJQ2l0eSB7XG4gICAgbmF0aXZlTmFtZTogc3RyaW5nO1xuICAgIGxhdGl0dWRlOiBudW1iZXI7XG4gICAgbG9uZ2l0dWRlOiBudW1iZXI7XG4gICAgemlwY29kZTogbnVtYmVyO1xuICAgIGNpdHlDb2RlOiBzdHJpbmc7XG4gICAgc3RhdGU6IHN0cmluZztcbiAgICBjb3VudHJ5OiBzdHJpbmc7XG4gICAgaXNvTGFuZzogc3RyaW5nO1xuICAgIHR6OiBzdHJpbmc7XG4gICAgY3VycmVuY3k6IHN0cmluZztcbiAgICBjdXJyZW5jeVN5bWJvbDogc3RyaW5nO1xuICAgIGRpc3RhbmNlPzogbnVtYmVyO1xuICAgIHN1YmNvbnRpbmVudDogc3RyaW5nO1xuICAgIGNvbnRpbmVudDogc3RyaW5nO1xuICAgIHJlZ2lvbjogc3RyaW5nO1xufVxuXG5pbnRlcmZhY2UgSUdlbyB7XG4gICAgbmF0aXZlTmFtZTogc3RyaW5nO1xuICAgIHppcGNvZGU6IHN0cmluZztcbiAgICBjaXRpZXM6IElDaXR5W107XG4gICAgbWFpbjogSUNpdHk7XG4gICAgbGF0aXR1ZGU6IG51bWJlcjtcbiAgICBsb25naXR1ZGU6IG51bWJlcjtcbn1cblxuXG5pbnRlcmZhY2UgSXN0YXRlIHtcbiAgICByZWdpb25zOiBJR2VvY29kZXNbXTtcbiAgICBib3VuZGFyaWVzOiBJQm91bmRhcnlbXTtcbiAgICBjYXBpdGFsOiBJQ2l0eTtcbiAgICBuYXRpdmVOYW1lOiBzdHJpbmc7XG4gICAgbGF0bG5nOiBudW1iZXJbXTtcbiAgICBpc29MYW5nOiBzdHJpbmdbXTtcbiAgICBuYW1lOiBzdHJpbmc7XG4gICAgdHo6IHN0cmluZztcbiAgICBjb3VudHJ5OiBzdHJpbmc7XG4gICAgc3ViY29udGluZW50OiBzdHJpbmc7XG4gICAgY29udGluZW50OiBzdHJpbmc7XG59XG5cbmludGVyZmFjZSBJQ291bnRyeSB7XG4gICAgc3RhdGVzOiBJc3RhdGVbXTtcbiAgICBuYW1lOiBzdHJpbmc7XG4gICAgYm91bmRhcmllczogSUJvdW5kYXJ5W11bXTtcbiAgICBuYXRpdmVOYW1lOiBzdHJpbmc7XG4gICAgY2FwaXRhbDogSUNpdHk7XG4gICAgY3VycmVuY2llczogc3RyaW5nW107XG4gICAgaXNvTGFuZzogc3RyaW5nW107XG4gICAgbGF0bG5nOiBudW1iZXJbXTtcbiAgICB0ejogc3RyaW5nO1xuICAgIHN1YmNvbnRpbmVudDogc3RyaW5nO1xuICAgIGNvbnRpbmVudDogc3RyaW5nO1xufVxuXG5pbnRlcmZhY2UgSVN1YmNvbnRpbmVudCB7XG4gICAgbmFtZTogc3RyaW5nO1xuICAgIGNvdW50cmllczogSUNvdW50cnlbXTtcbiAgICBib3VuZGFyaWVzOiBJQm91bmRhcnlbXTtcbiAgICBjb250aW5lbnQ6IHN0cmluZztcbn1cblxuaW50ZXJmYWNlIElHZW9idWlsZCB7XG4gICAgbmFtZTogc3RyaW5nO1xuICAgIHN1YmNvbnRpbmVudHM6IElTdWJjb250aW5lbnRbXTtcbiAgICBib3VuZGFyaWVzOiBJQm91bmRhcnlbXTtcbn1cblxuXG5pbnRlcmZhY2UgSUxvY2FsaXphdGlvbiB7XG4gICAgbGF0aXR1ZGU6IG51bWJlcjtcbiAgICBsb25naXR1ZGU6IG51bWJlcjtcbn1cblxuY29uc3QgdzogSUdlb2J1aWxkW10gPSByZXF1aXJlKFwiLi9vbmx5d29ybGQuanNvblwiKTtcblxuXG5mdW5jdGlvbiBsb2FkYkJpZ1dvcmxkZnJvbXJlbW90ZWRiKHVybCk6IFByb21pc2U8SUdlb2J1aWxkW10+IHtcbiAgICByZXR1cm4gbmV3IFByb21pc2U8SUdlb2J1aWxkW10+KChyZXNvbHZlLCByZWplY3QpID0+IHtcblxuICAgICAgICBsZXQgYmlnV29ybGQ6IElHZW9idWlsZFtdO1xuXG4gICAgICAgIHN1cGVyYWdlbnQuZ2V0KHVybCkuZW5kKGZ1bmN0aW9uIChlcnIsIHJlcykge1xuICAgICAgICAgICAgaWYgKGVyciB8fCAhcmVzLm9rKSB7XG5cbiAgICAgICAgICAgICAgICByZWplY3QoZXJyKVxuXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGJpZ1dvcmxkID0gcmVzLmJvZHkuY29udGluZW50cztcbiAgICAgICAgICAgICAgICByZXNvbHZlKGJpZ1dvcmxkKVxuICAgICAgICAgICAgfVxuICAgICAgICB9KVxuICAgIH0pXG5cbn1cblxuZnVuY3Rpb24gbG9hZGNvbnRyeXJlbW90ZWx5KHVybDogc3RyaW5nLCBjb3VudHJ5TmFtZTogc3RyaW5nKTogUHJvbWlzZTxJQ291bnRyeT4ge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZTxJQ291bnRyeT4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuXG4gICAgICAgIGxldCBjb3VudHJ5OiBJQ291bnRyeTtcblxuICAgICAgICBzdXBlcmFnZW50LnBvc3QodXJsKS5zZW5kKHsgY291bnRyeW5hbWU6IGNvdW50cnlOYW1lIH0pLmVuZChmdW5jdGlvbiAoZXJyLCByZXMpIHtcbiAgICAgICAgICAgIGlmIChlcnIgfHwgIXJlcy5vaykge1xuICAgICAgICAgICAgICAgIHJlamVjdChlcnIpXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvdW50cnkgPSByZXMuYm9keTtcbiAgICAgICAgICAgICAgICByZXNvbHZlKGNvdW50cnkpXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgfSlcbn1cblxuXG5cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTG9jYWxpemUge1xuICAgIGJpZ1dvcmxkOiBJR2VvYnVpbGRbXTtcbiAgICBzdGF0ZTogSXN0YXRlO1xuICAgIHdvcmxkOiBJR2VvYnVpbGRbXTtcbiAgICByZW1vdGU6IHN0cmluZztcbiAgICB3b3JsZERCOiBzdHJpbmc7XG4gICAgbG9jYWxpemF0aW9uOiBJTG9jYWxpemF0aW9uO1xuXG4gICAgY29uc3RydWN0b3IobzogeyB3b3JsZD86IElHZW9idWlsZFtdLCBiaWdXb3JsZD86IElHZW9idWlsZFtdLCByZW1vdGU/OiBzdHJpbmcsIHdvcmxkREI/OiBzdHJpbmcsIHN0YXRlPzogSXN0YXRlIH0pIHtcbiAgICAgICAgaWYgKCFvKSB0aHJvdyBFcnJvcihcIm5vIGNvbmZcIik7XG5cblxuICAgICAgICBpZiAoby5iaWdXb3JsZCkge1xuICAgICAgICAgICAgdGhpcy5iaWdXb3JsZCA9IG8uYmlnV29ybGQ7XG4gICAgICAgICAgICB0aGlzLndvcmxkID0gdztcblxuICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICBpZiAoby5zdGF0ZSkgdGhpcy5zdGF0ZSA9IG8uc3RhdGU7XG5cbiAgICAgICAgICAgIGlmIChvICYmIG8ud29ybGQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLndvcmxkID0gby53b3JsZFxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLndvcmxkID0gd1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAobyAmJiBvLnJlbW90ZSkge1xuICAgICAgICAgICAgICAgIHRoaXMucmVtb3RlID0gby5yZW1vdGVcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobyAmJiBvLndvcmxkREIpIHtcbiAgICAgICAgICAgICAgICB0aGlzLndvcmxkREIgPSBvLndvcmxkREJcbiAgICAgICAgICAgIH1cblxuXG4gICAgICAgIH1cblxuICAgIH1cblxuICAgIGdldENvdW50cnlGcm9tUG9zaXRpb24obzogSUxvY2FsaXphdGlvbik6IElDb3VudHJ5IHtcblxuICAgICAgICBsZXQgcG9zOiBJTG9jYWxpemF0aW9uID0geyBsYXRpdHVkZTogby5sYXRpdHVkZSwgbG9uZ2l0dWRlOiBvLmxvbmdpdHVkZSB9O1xuXG4gICAgICAgIGxldCBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGxldCBleGlzdHMgPSBmYWxzZTtcbiAgICAgICAgbGV0IGM6IElDb3VudHJ5O1xuICAgICAgICBsZXQgY2VudGVycyA9IFtdO1xuXG4gICAgICAgIF8ubWFwKF90aGlzLndvcmxkLCBmdW5jdGlvbiAoY29udGluZW50KSB7XG4gICAgICAgICAgICBfLm1hcChjb250aW5lbnQuc3ViY29udGluZW50cywgZnVuY3Rpb24gKHN1YmNvbnRpbmVudCkge1xuXG4gICAgICAgICAgICAgICAgXy5tYXAoc3ViY29udGluZW50LmNvdW50cmllcywgZnVuY3Rpb24gKGNvdW50cnkpIHtcblxuICAgICAgICAgICAgICAgICAgICBfLm1hcChjb3VudHJ5LmJvdW5kYXJpZXMsIGZ1bmN0aW9uIChhcmVhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWMpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgYXJlYVswXVswXSAhPT0gXCJvYmplY3RcIikge1xuXG5cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZ2VvLmlzUG9pbnRJbnNpZGUocG9zLCBhcmVhKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhpc3RzID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGMgPSBjb3VudHJ5O1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjZW50ZXJzLnB1c2goeyBuYXRpb246IGNvdW50cnkubmFtZSwgZGlzdGFuY2U6IGdlby5nZXREaXN0YW5jZShnZW8uZ2V0Q2VudGVyT2ZCb3VuZHMoYXJlYSksIHBvcykgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXy5tYXAoYXJlYSwgZnVuY3Rpb24gKGEpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGdlby5pc1BvaW50SW5zaWRlKHBvcywgYSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleGlzdHMgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGMgPSBjb3VudHJ5O1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNlbnRlcnMucHVzaCh7IG5hdGlvbjogY291bnRyeS5uYW1lLCBkaXN0YW5jZTogZ2VvLmdldERpc3RhbmNlKGdlby5nZXRDZW50ZXJPZkJvdW5kcyhhKSwgcG9zKSB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KVxuXG5cbiAgICAgICAgICAgICAgICB9KVxuXG4gICAgICAgICAgICB9KVxuXG4gICAgICAgIH0pXG5cbiAgICAgICAgaWYgKCFleGlzdHMpIHtcbiAgICAgICAgICAgIGxldCBkaXN0OiBhbnkgPSBmYWxzZTtcbiAgICAgICAgICAgIF8ubWFwKGNlbnRlcnMsIGZ1bmN0aW9uIChjbykge1xuICAgICAgICAgICAgICAgIGlmICghZGlzdCB8fCBjby5kaXN0YW5jZSA8IGRpc3QuZGlzdGFuY2UpIHtcbiAgICAgICAgICAgICAgICAgICAgZGlzdCA9IGNvXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9KVxuXG4gICAgICAgICAgICBfLm1hcChfdGhpcy53b3JsZCwgZnVuY3Rpb24gKGNvbnRpbmVudCkge1xuICAgICAgICAgICAgICAgIF8ubWFwKGNvbnRpbmVudC5zdWJjb250aW5lbnRzLCBmdW5jdGlvbiAoc3ViY29udGluZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIF8ubWFwKHN1YmNvbnRpbmVudC5jb3VudHJpZXMsIGZ1bmN0aW9uIChjb3VudHJ5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGlzdC5uYXRpb24gPT0gY291bnRyeS5uYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYyA9IGNvdW50cnlcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfSlcblxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjXG4gICAgfVxuXG5cbiAgICBjaGVja2lmSW5zaWRlU3RhdGUocG9zOiBJTG9jYWxpemF0aW9uKTogSUNpdHlbXSB8IGJvb2xlYW4ge1xuICAgICAgICBsZXQgX3RoaXMgPSB0aGlzO1xuICAgICAgICBpZiAoIXRoaXMuc3RhdGUpIHRocm93IEVycm9yKFwibm8gc3RhdGUgc2V0XCIpO1xuXG4gICAgICAgIGxldCBwb3NpdGlvbiA9IHRoaXMuZ2V0UG9zaXRpb25Gcm9tU3RhdGUocG9zLCBfdGhpcy5zdGF0ZSk7XG5cbiAgICAgICAgaWYgKHBvc2l0aW9uWzBdLmRpc3RhbmNlIDwgMjAwMDApIHtcbiAgICAgICAgICAgIHJldHVybiBwb3NpdGlvblxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgIH1cbiAgICB9XG5cblxuICAgIHJlbG9hZEN1cnJlbnRTdGF0ZShvOiBJTG9jYWxpemF0aW9uKSB7IC8vdG9kb1xuICAgICAgICBsZXQgX3RoaXMgPSB0aGlzO1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2U8Ym9vbGVhbj4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuXG4gICAgICAgICAgICBfdGhpcy5nZXRTdGF0ZXMobykudGhlbigocykgPT4ge1xuICAgICAgICAgICAgICAgIF90aGlzLnN0YXRlID0gc1xuICAgICAgICAgICAgICAgIHJlc29sdmUodHJ1ZSk7XG4gICAgICAgICAgICB9KS5jYXRjaCgoZXJyKSA9PiB7XG4gICAgICAgICAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgICAgICB9KVxuXG5cblxuICAgICAgICB9KVxuICAgIH1cblxuICAgIHNldFBvc2l0aW9uKHBvczogSUxvY2FsaXphdGlvbik6IFByb21pc2U8SUNpdHlbXT4ge1xuICAgICAgICBsZXQgX3RoaXMgPSB0aGlzO1xuXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZTxJQ2l0eVtdPigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICBpZiAoIShwb3MgJiYgcG9zLmxhdGl0dWRlICYmIHBvcy5sb25naXR1ZGUpKSB7XG4gICAgICAgICAgICAgICAgcmVqZWN0KFwiTm8gY29vcmRzIHByb3ZpZGVkXCIpO1xuICAgICAgICAgICAgfSBlbHNlIHtcblxuXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gcmVsb2FkKCkge1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5yZWxvYWRDdXJyZW50U3RhdGUocG9zKS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLmxvY2FsaXphdGlvbiA9IHBvcztcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoX3RoaXMuZ2V0UG9zaXRpb25Gcm9tU3RhdGUocG9zKSk7XG4gICAgICAgICAgICAgICAgICAgIH0pLmNhdGNoKChlcnIpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChfdGhpcy5zdGF0ZSkge1xuICAgICAgICAgICAgICAgICAgICBsZXQgY2hlY2tpZkluc2lkZVN0YXRlID0gX3RoaXMuY2hlY2tpZkluc2lkZVN0YXRlKHBvcylcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNoZWNraWZJbnNpZGVTdGF0ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSg8SUNpdHlbXT5jaGVja2lmSW5zaWRlU3RhdGUpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVsb2FkKClcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJlbG9hZCgpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KVxuICAgIH1cblxuXG4gICAgZ2V0UG9zaXRpb25Gcm9tU3RhdGUocG9zOiBJTG9jYWxpemF0aW9uLCBTdGF0ZT86IElzdGF0ZSk6IElDaXR5W10ge1xuICAgICAgICBsZXQgX3RoaXMgPSB0aGlzO1xuXG4gICAgICAgIC8vIGxpdmVsbG8gbmF6aW9uYWxlXG4gICAgICAgIGxldCBhbGxwcm92aW5jZXM6IElDaXR5W10gPSBfdGhpcy5nZXRQcm92aW5jZXNGcm9tU3RhdGUoU3RhdGUpO1xuXG5cblxuXG5cbiAgICAgICAgXy5tYXAoYWxscHJvdmluY2VzLCBmdW5jdGlvbiAoYykge1xuICAgICAgICAgICAgYy5kaXN0YW5jZSA9IGdlby5nZXREaXN0YW5jZSh7IGxhdGl0dWRlOiBjLmxhdGl0dWRlLCBsb25naXR1ZGU6IGMubG9uZ2l0dWRlIH0sIHBvcyk7XG4gICAgICAgIH0pXG5cblxuICAgICAgICBsZXQgcmVwcm92ID0gXy50YWtlKF8ub3JkZXJCeShhbGxwcm92aW5jZXMsIFsnZGlzdGFuY2UnXSwgWydhc2MnXSksIDIpO1xuXG4gICAgICAgIGxldCBwcm92aW5jZXMgPSBbXTtcbiAgICAgICAgXy5tYXAocmVwcm92LCBmdW5jdGlvbiAoYzogSUNpdHkpIHtcblxuICAgICAgICAgICAgXy5tYXAoX3RoaXMuZ2V0Q2l0aWVzRnJvbVByb3ZpbmNlcyhjLm5hdGl2ZU5hbWUsIFN0YXRlKSwgZnVuY3Rpb24gKHApIHtcbiAgICAgICAgICAgICAgICBwLmRpc3RhbmNlID0gZ2VvLmdldERpc3RhbmNlKHsgbGF0aXR1ZGU6IHAubGF0aXR1ZGUsIGxvbmdpdHVkZTogcC5sb25naXR1ZGUgfSwgcG9zKTtcbiAgICAgICAgICAgICAgICBwcm92aW5jZXMucHVzaChwKVxuICAgICAgICAgICAgfSlcblxuICAgICAgICB9KVxuXG5cbiAgICAgICAgbGV0IGNpdGllczogSUNpdHlbXSA9IDxJQ2l0eVtdPl8udGFrZShfLm9yZGVyQnkocHJvdmluY2VzLCBbJ2Rpc3RhbmNlJ10sIFsnYXNjJ10pLCAyKTtcblxuICAgICAgICBpZiAoY2l0aWVzWzBdLmRpc3RhbmNlICogMS40ID4gY2l0aWVzWzBdLmRpc3RhbmNlKSB7XG4gICAgICAgICAgICBjaXRpZXMgPSBbY2l0aWVzWzBdXVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGNpdGllc1xuXG4gICAgfVxuXG5cbiAgICBnZXRMb2NhdGlvbihvOiB7IGNpdHk6IHN0cmluZywgc3RhdGU/OiBzdHJpbmcgfSkge1xuICAgICAgICByZXR1cm4gdHJ1ZVxuXG4gICAgfVxuXG4gICAgZ2V0aW5mbyhvOiB7IGNpdHk6IHN0cmluZywgc3RhdGU/OiBzdHJpbmcgfSkge1xuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cblxuXG4gICAgZ2V0U3RhdGVGcm9tQ291bnRyeShwb3M6IElMb2NhbGl6YXRpb24sIGNvdW50cnk6IElDb3VudHJ5KTogSXN0YXRlIHtcblxuICAgICAgICBsZXQgc3RhdGU6IElzdGF0ZTtcblxuXG4gICAgICAgIGlmIChjb3VudHJ5LnN0YXRlcy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgIHN0YXRlID0gY291bnRyeS5zdGF0ZXNbMF1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwidG9kb1wiKVxuXG4gICAgICAgIH1cblxuXG4gICAgICAgIHJldHVybiBzdGF0ZVxuICAgIH1cblxuXG4gICAgZ2V0U3RhdGVzKHBvczogSUxvY2FsaXphdGlvbik6IFByb21pc2U8SXN0YXRlPiB7XG4gICAgICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlPElzdGF0ZT4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuXG4gICAgICAgICAgICBjb25zdCBjb3VudHJ5ID0gX3RoaXMuZ2V0Q291bnRyeUZyb21Qb3NpdGlvbihwb3MpO1xuXG5cbiAgICAgICAgICAgIGlmIChfdGhpcy5iaWdXb3JsZCkge1xuICAgICAgICAgICAgICAgIF8ubWFwKF90aGlzLmJpZ1dvcmxkLCBmdW5jdGlvbiAoY29udGluZW50KSB7XG5cbiAgICAgICAgICAgICAgICAgICAgXy5tYXAoY29udGluZW50LnN1YmNvbnRpbmVudHMsIGZ1bmN0aW9uIChzdWJjb250aW5lbnQpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgXy5tYXAoc3ViY29udGluZW50LmNvdW50cmllcywgZnVuY3Rpb24gKGMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYy5uYW1lID09PSBjb3VudHJ5Lm5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShfdGhpcy5nZXRTdGF0ZUZyb21Db3VudHJ5KHBvcywgYykpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICB9KVxuXG4gICAgICAgICAgICB9IGVsc2UgaWYgKF90aGlzLnJlbW90ZSkge1xuXG5cblxuXG5cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoX3RoaXMud29ybGREQikge1xuXG4gICAgICAgICAgICAgICAgbG9hZGJCaWdXb3JsZGZyb21yZW1vdGVkYihfdGhpcy53b3JsZERCKS50aGVuKCh3b3JsZCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBfLm1hcCh3b3JsZCwgZnVuY3Rpb24gKGNvbnRpbmVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgXy5tYXAoY29udGluZW50LnN1YmNvbnRpbmVudHMsIGZ1bmN0aW9uIChzdWJjb250aW5lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfLm1hcChzdWJjb250aW5lbnQuY291bnRyaWVzLCBmdW5jdGlvbiAoYykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYy5uYW1lID09PSBjb3VudHJ5Lm5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoX3RoaXMuZ2V0U3RhdGVGcm9tQ291bnRyeShwb3MsIGMpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIH0pXG5cbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfVxuICAgICAgICB9KVxuICAgIH1cblxuICAgIGdldFByb3ZpbmNlc0Zyb21TdGF0ZShzdGF0ZT86IElzdGF0ZSk6IElDaXR5W10ge1xuICAgICAgICBsZXQgX3RoaXMgPSB0aGlzO1xuICAgICAgICBsZXQgU3RhdGU6IElzdGF0ZSA9IF90aGlzLnN0YXRlO1xuXG4gICAgICAgIGlmIChzdGF0ZSkgU3RhdGUgPSBzdGF0ZVxuXG5cbiAgICAgICAgbGV0IHByb3ZpbmNlczogSUNpdHlbXSA9IFtdO1xuXG4gICAgICAgIF8ubWFwKFN0YXRlLnJlZ2lvbnMsIGZ1bmN0aW9uIChyKSB7XG4gICAgICAgICAgICBfLm1hcChyLmNpdGllcywgZnVuY3Rpb24gKGMpIHtcbiAgICAgICAgICAgICAgICBwcm92aW5jZXMucHVzaChjKVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfSlcblxuXG4gICAgICAgIHJldHVybiBwcm92aW5jZXNcblxuICAgIH1cblxuICAgIGdldENpdGllc0Zyb21Qcm92aW5jZXMoY2l0eTogc3RyaW5nLCBzdGF0ZT86IElzdGF0ZSk6IElDaXR5W10ge1xuICAgICAgICBsZXQgX3RoaXMgPSB0aGlzO1xuICAgICAgICBsZXQgU3RhdGU6IElzdGF0ZSA9IHRoaXMuc3RhdGU7XG5cbiAgICAgICAgaWYgKHN0YXRlKSBTdGF0ZSA9IHN0YXRlXG5cbiAgICAgICAgbGV0IHByb3ZpbmNlczogSUNpdHlbXSA9IFtdO1xuICAgICAgICBfLm1hcChTdGF0ZS5yZWdpb25zLCBmdW5jdGlvbiAocikge1xuICAgICAgICAgICAgXy5tYXAoci5wcm92aW5jZXMsIGZ1bmN0aW9uIChwKSB7XG4gICAgICAgICAgICAgICAgaWYgKHAubWFpbi5uYXRpdmVOYW1lID09PSBjaXR5KSB7XG4gICAgICAgICAgICAgICAgICAgIF8ubWFwKHAuY2l0aWVzLCBmdW5jdGlvbiAoYykge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBwcm92aW5jZXMucHVzaChjKVxuXG5cbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICB9XG5cblxuICAgICAgICAgICAgfSlcblxuICAgICAgICB9KVxuXG5cbiAgICAgICAgcmV0dXJuIHByb3ZpbmNlc1xuXG4gICAgfVxuXG59Il0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
