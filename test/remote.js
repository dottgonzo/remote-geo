"use strict";
var index_1 = require('../index');
var expect = require("chai").expect;
var remote = "https://emnetserver.kernel.online/position";
var pos0 = [37.533057, 15.060421];
var pos1 = [37.504192, 15.068489];
var latlng = { latitude: pos0[0], longitude: pos0[1] };
var latlng2 = { latitude: pos1[0], longitude: pos1[1] };
var loc;
before(function () {
    loc = new index_1.default({ remote: remote });
});
describe("test remote server", function () {
    describe("class instantiation with standards", function () {
        it("validate worldDB conf", function () {
            expect(loc.world).to.be.an('Array');
            expect(loc.remote).to.be.a('string');
            expect(loc.remote).to.eq(remote);
            expect(loc.bigWorld).to.not.exist;
            expect(loc.localization).to.not.exist;
            expect(loc.state).to.not.exist;
            expect(loc).to.be.ok;
            expect(loc).to.be.an('Object');
        });
    });
    describe("position is ok?", function () {
        this.timeout(30000);
        it("verificate working of localization", function (done) {
            loc.setPosition(latlng).then(function (c) {
                expect(loc.state).to.be.an('Object');
                expect(c).to.be.an('Array');
                expect(c[0]).to.be.an('Object');
                expect(c[0].nativeName).to.be.a('string');
                done();
            }).catch(function (c) {
                done(Error(c));
            });
        });
        it("verificate working of 2 localization", function (done) {
            loc.setPosition(latlng2).then(function (c) {
                expect(loc.state).to.be.an('Object');
                expect(c).to.be.an('Array');
                expect(c[0]).to.be.an('Object');
                expect(c[0].nativeName).to.be.a('string');
                done();
            }).catch(function (c) {
                done(Error(c));
            });
        });
    });
});

//# sourceMappingURL=data:application/json;base64,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cnQgTG9jYWxpemUgZnJvbSAnLi4vaW5kZXgnXG5pbXBvcnQgKiBhcyBtb2NoYSBmcm9tIFwibW9jaGFcIjtcblxuY29uc3QgZXhwZWN0ID0gcmVxdWlyZShcImNoYWlcIikuZXhwZWN0O1xuXG5jb25zdCByZW1vdGUgPSBcImh0dHBzOi8vZW1uZXRzZXJ2ZXIua2VybmVsLm9ubGluZS9wb3NpdGlvblwiO1xuXG5jb25zdCBwb3MwID0gWzM3LjUzMzA1NywgMTUuMDYwNDIxXVxuY29uc3QgcG9zMSA9IFszNy41MDQxOTIsIDE1LjA2ODQ4OV1cblxuY29uc3QgbGF0bG5nID0geyBsYXRpdHVkZTogcG9zMFswXSwgbG9uZ2l0dWRlOiBwb3MwWzFdIH07XG5jb25zdCBsYXRsbmcyID0geyBsYXRpdHVkZTogcG9zMVswXSwgbG9uZ2l0dWRlOiBwb3MxWzFdIH07XG5cblxubGV0IGxvYzogTG9jYWxpemU7XG5cbmJlZm9yZShmdW5jdGlvbiAoKSB7XG4gICAgbG9jID0gbmV3IExvY2FsaXplKHsgcmVtb3RlOiByZW1vdGUgfSlcbn0pXG5kZXNjcmliZShcInRlc3QgcmVtb3RlIHNlcnZlclwiLCBmdW5jdGlvbiAoKSB7XG5cbiAgICBkZXNjcmliZShcImNsYXNzIGluc3RhbnRpYXRpb24gd2l0aCBzdGFuZGFyZHNcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICBpdChcInZhbGlkYXRlIHdvcmxkREIgY29uZlwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBleHBlY3QobG9jLndvcmxkKS50by5iZS5hbignQXJyYXknKTtcbiAgICAgICAgICAgIGV4cGVjdChsb2MucmVtb3RlKS50by5iZS5hKCdzdHJpbmcnKTtcbiAgICAgICAgICAgIGV4cGVjdChsb2MucmVtb3RlKS50by5lcShyZW1vdGUpO1xuICAgICAgICAgICAgZXhwZWN0KGxvYy5iaWdXb3JsZCkudG8ubm90LmV4aXN0O1xuICAgICAgICAgICAgZXhwZWN0KGxvYy5sb2NhbGl6YXRpb24pLnRvLm5vdC5leGlzdDtcbiAgICAgICAgICAgIGV4cGVjdChsb2Muc3RhdGUpLnRvLm5vdC5leGlzdDtcbiAgICAgICAgICAgIGV4cGVjdChsb2MpLnRvLmJlLm9rO1xuICAgICAgICAgICAgZXhwZWN0KGxvYykudG8uYmUuYW4oJ09iamVjdCcpO1xuXG4gICAgICAgIH0pXG5cblxuICAgIH0pXG5cbiAgICBkZXNjcmliZShcInBvc2l0aW9uIGlzIG9rP1wiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMudGltZW91dCgzMDAwMCk7XG5cbiAgICAgICAgaXQoXCJ2ZXJpZmljYXRlIHdvcmtpbmcgb2YgbG9jYWxpemF0aW9uXCIsIGZ1bmN0aW9uIChkb25lKSB7XG4gICAgICAgICAgICBsb2Muc2V0UG9zaXRpb24obGF0bG5nKS50aGVuKChjKSA9PiB7XG5cbiAgICAgICAgICAgICAgICBleHBlY3QobG9jLnN0YXRlKS50by5iZS5hbignT2JqZWN0Jyk7XG4gICAgICAgICAgICAgICAgZXhwZWN0KGMpLnRvLmJlLmFuKCdBcnJheScpO1xuICAgICAgICAgICAgICAgIGV4cGVjdChjWzBdKS50by5iZS5hbignT2JqZWN0Jyk7XG4gICAgICAgICAgICAgICAgZXhwZWN0KGNbMF0ubmF0aXZlTmFtZSkudG8uYmUuYSgnc3RyaW5nJyk7XG4gICAgICAgICAgICAgICAgZG9uZSgpXG4gICAgICAgICAgICB9KS5jYXRjaCgoYykgPT4ge1xuICAgICAgICAgICAgICAgIGRvbmUoRXJyb3IoYykpXG5cbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0pXG4gICAgICAgIGl0KFwidmVyaWZpY2F0ZSB3b3JraW5nIG9mIDIgbG9jYWxpemF0aW9uXCIsIGZ1bmN0aW9uIChkb25lKSB7XG5cbiAgICAgICAgICAgIGxvYy5zZXRQb3NpdGlvbihsYXRsbmcyKS50aGVuKChjKSA9PiB7XG5cbiAgICAgICAgICAgICAgICBleHBlY3QobG9jLnN0YXRlKS50by5iZS5hbignT2JqZWN0Jyk7XG4gICAgICAgICAgICAgICAgZXhwZWN0KGMpLnRvLmJlLmFuKCdBcnJheScpO1xuICAgICAgICAgICAgICAgIGV4cGVjdChjWzBdKS50by5iZS5hbignT2JqZWN0Jyk7XG4gICAgICAgICAgICAgICAgZXhwZWN0KGNbMF0ubmF0aXZlTmFtZSkudG8uYmUuYSgnc3RyaW5nJyk7XG4gICAgICAgICAgICAgICAgZG9uZSgpO1xuXG4gICAgICAgICAgICB9KS5jYXRjaCgoYykgPT4ge1xuXG4gICAgICAgICAgICAgICAgZG9uZShFcnJvcihjKSlcblxuICAgICAgICAgICAgfSlcblxuXG5cbiAgICAgICAgfSlcbiAgICB9KVxufSkiXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
