"use strict";
var index_1 = require('../index');
var expect = require("chai").expect;
var worldDB = "https://couchdb.kernel.online/public/geoworld";
var pos0 = [37.533057, 15.060421];
var pos1 = [37.504192, 15.068489];
var latlng = { latitude: pos0[0], longitude: pos0[1] };
var latlng2 = { latitude: pos1[0], longitude: pos1[1] };
var loc;
before(function () {
    loc = new index_1.default({ worldDB: worldDB });
});
describe("class instantiation with standards", function () {
    it("validate worldDB conf", function () {
        expect(loc.world).to.be.an('Array');
        expect(loc.worldDB).to.be.a('string');
        expect(loc.worldDB).to.eq(worldDB);
        expect(loc.bigWorld).to.not.exist;
        expect(loc.localization).to.not.exist;
        expect(loc.state).to.not.exist;
        expect(loc).to.be.ok;
        expect(loc).to.be.an('Object');
    });
});
describe("position is ok?", function () {
    this.timeout(10000);
    it("verificate working of localization", function (done) {
        loc.setPosition(latlng).then(function (c) {
            expect(loc.state).to.be.an('Object');
            expect(c).to.be.an('Array');
            expect(c[0]).to.be.an('Object');
            expect(c[0].nativeName).to.be.a('string');
            done();
        }).catch(function (c) {
            console.log(c);
            expect(c).to.not.exsist;
            done();
        });
    });
    it("verificate working of 2 localization", function (done) {
        loc.setPosition(latlng2).then(function (c) {
            expect(loc.state).to.be.an('Object');
            expect(c).to.be.an('Array');
            expect(c[0]).to.be.an('Object');
            expect(c[0].nativeName).to.be.a('string');
            done();
        }).catch(function (c) {
            console.log(c);
            expect(c).to.not.exsist;
            done();
        });
    });
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvcmVtb3RlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxzQkFBcUIsVUFDckIsQ0FBQyxDQUQ4QjtBQUcvQixJQUFNLE1BQU0sR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsTUFBTSxDQUFDO0FBRXRDLElBQU0sT0FBTyxHQUFHLCtDQUErQyxDQUFDO0FBRWhFLElBQU0sSUFBSSxHQUFHLENBQUMsU0FBUyxFQUFFLFNBQVMsQ0FBQyxDQUFBO0FBQ25DLElBQU0sSUFBSSxHQUFHLENBQUMsU0FBUyxFQUFFLFNBQVMsQ0FBQyxDQUFBO0FBRW5DLElBQU0sTUFBTSxHQUFHLEVBQUUsUUFBUSxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxTQUFTLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7QUFDekQsSUFBTSxPQUFPLEdBQUcsRUFBRSxRQUFRLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLFNBQVMsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztBQUcxRCxJQUFJLEdBQWEsQ0FBQztBQUVsQixNQUFNLENBQUM7SUFFSCxHQUFHLEdBQUcsSUFBSSxlQUFRLENBQUMsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQTtBQUc1QyxDQUFDLENBQUMsQ0FBQTtBQUVGLFFBQVEsQ0FBQyxvQ0FBb0MsRUFBRTtJQUMzQyxFQUFFLENBQUMsdUJBQXVCLEVBQUU7UUFDeEIsTUFBTSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUNwQyxNQUFNLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ3RDLE1BQU0sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUNuQyxNQUFNLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDO1FBQ2xDLE1BQU0sQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUM7UUFDdEMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQztRQUMvQixNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUM7UUFDckIsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBRW5DLENBQUMsQ0FBQyxDQUFBO0FBR04sQ0FBQyxDQUFDLENBQUE7QUFFRixRQUFRLENBQUMsaUJBQWlCLEVBQUU7SUFDeEIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUVwQixFQUFFLENBQUMsb0NBQW9DLEVBQUUsVUFBVSxJQUFJO1FBQ25ELEdBQUcsQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQUMsQ0FBQztZQUUzQixNQUFNLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBQ3JDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUM1QixNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDaEMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUMxQyxJQUFJLEVBQUUsQ0FBQTtRQUNWLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxVQUFDLENBQUM7WUFDUCxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFBO1lBQ2QsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFBO1lBQ3ZCLElBQUksRUFBRSxDQUFBO1FBQ1YsQ0FBQyxDQUFDLENBQUE7SUFDTixDQUFDLENBQUMsQ0FBQTtJQUNGLEVBQUUsQ0FBQyxzQ0FBc0MsRUFBRSxVQUFVLElBQUk7UUFFckQsR0FBRyxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBQyxDQUFDO1lBRTVCLE1BQU0sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDckMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQzVCLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUNoQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBQzFDLElBQUksRUFBRSxDQUFDO1FBRVgsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLFVBQUMsQ0FBQztZQUVQLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUE7WUFDZCxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUE7WUFDdkIsSUFBSSxFQUFFLENBQUE7UUFFVixDQUFDLENBQUMsQ0FBQTtJQUlOLENBQUMsQ0FBQyxDQUFBO0FBQ04sQ0FBQyxDQUFDLENBQUEiLCJmaWxlIjoidGVzdC9yZW1vdGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgTG9jYWxpemUgZnJvbSAnLi4vaW5kZXgnXG5pbXBvcnQgKiBhcyBtb2NoYSBmcm9tIFwibW9jaGFcIjtcblxuY29uc3QgZXhwZWN0ID0gcmVxdWlyZShcImNoYWlcIikuZXhwZWN0O1xuXG5jb25zdCB3b3JsZERCID0gXCJodHRwczovL2NvdWNoZGIua2VybmVsLm9ubGluZS9wdWJsaWMvZ2Vvd29ybGRcIjtcblxuY29uc3QgcG9zMCA9IFszNy41MzMwNTcsIDE1LjA2MDQyMV1cbmNvbnN0IHBvczEgPSBbMzcuNTA0MTkyLCAxNS4wNjg0ODldXG5cbmNvbnN0IGxhdGxuZyA9IHsgbGF0aXR1ZGU6IHBvczBbMF0sIGxvbmdpdHVkZTogcG9zMFsxXSB9O1xuY29uc3QgbGF0bG5nMiA9IHsgbGF0aXR1ZGU6IHBvczFbMF0sIGxvbmdpdHVkZTogcG9zMVsxXSB9O1xuXG5cbmxldCBsb2M6IExvY2FsaXplO1xuXG5iZWZvcmUoZnVuY3Rpb24gKCkge1xuXG4gICAgbG9jID0gbmV3IExvY2FsaXplKHsgd29ybGREQjogd29ybGREQiB9KVxuXG5cbn0pXG5cbmRlc2NyaWJlKFwiY2xhc3MgaW5zdGFudGlhdGlvbiB3aXRoIHN0YW5kYXJkc1wiLCBmdW5jdGlvbiAoKSB7XG4gICAgaXQoXCJ2YWxpZGF0ZSB3b3JsZERCIGNvbmZcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICBleHBlY3QobG9jLndvcmxkKS50by5iZS5hbignQXJyYXknKTtcbiAgICAgICAgZXhwZWN0KGxvYy53b3JsZERCKS50by5iZS5hKCdzdHJpbmcnKTtcbiAgICAgICAgZXhwZWN0KGxvYy53b3JsZERCKS50by5lcSh3b3JsZERCKTtcbiAgICAgICAgZXhwZWN0KGxvYy5iaWdXb3JsZCkudG8ubm90LmV4aXN0O1xuICAgICAgICBleHBlY3QobG9jLmxvY2FsaXphdGlvbikudG8ubm90LmV4aXN0O1xuICAgICAgICBleHBlY3QobG9jLnN0YXRlKS50by5ub3QuZXhpc3Q7XG4gICAgICAgIGV4cGVjdChsb2MpLnRvLmJlLm9rO1xuICAgICAgICBleHBlY3QobG9jKS50by5iZS5hbignT2JqZWN0Jyk7XG5cbiAgICB9KVxuXG5cbn0pXG5cbmRlc2NyaWJlKFwicG9zaXRpb24gaXMgb2s/XCIsIGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLnRpbWVvdXQoMTAwMDApO1xuXG4gICAgaXQoXCJ2ZXJpZmljYXRlIHdvcmtpbmcgb2YgbG9jYWxpemF0aW9uXCIsIGZ1bmN0aW9uIChkb25lKSB7XG4gICAgICAgIGxvYy5zZXRQb3NpdGlvbihsYXRsbmcpLnRoZW4oKGMpID0+IHtcblxuICAgICAgICAgICAgZXhwZWN0KGxvYy5zdGF0ZSkudG8uYmUuYW4oJ09iamVjdCcpO1xuICAgICAgICAgICAgZXhwZWN0KGMpLnRvLmJlLmFuKCdBcnJheScpO1xuICAgICAgICAgICAgZXhwZWN0KGNbMF0pLnRvLmJlLmFuKCdPYmplY3QnKTtcbiAgICAgICAgICAgIGV4cGVjdChjWzBdLm5hdGl2ZU5hbWUpLnRvLmJlLmEoJ3N0cmluZycpO1xuICAgICAgICAgICAgZG9uZSgpXG4gICAgICAgIH0pLmNhdGNoKChjKSA9PiB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhjKVxuICAgICAgICAgICAgZXhwZWN0KGMpLnRvLm5vdC5leHNpc3RcbiAgICAgICAgICAgIGRvbmUoKVxuICAgICAgICB9KVxuICAgIH0pXG4gICAgaXQoXCJ2ZXJpZmljYXRlIHdvcmtpbmcgb2YgMiBsb2NhbGl6YXRpb25cIiwgZnVuY3Rpb24gKGRvbmUpIHtcblxuICAgICAgICBsb2Muc2V0UG9zaXRpb24obGF0bG5nMikudGhlbigoYykgPT4ge1xuXG4gICAgICAgICAgICBleHBlY3QobG9jLnN0YXRlKS50by5iZS5hbignT2JqZWN0Jyk7XG4gICAgICAgICAgICBleHBlY3QoYykudG8uYmUuYW4oJ0FycmF5Jyk7XG4gICAgICAgICAgICBleHBlY3QoY1swXSkudG8uYmUuYW4oJ09iamVjdCcpO1xuICAgICAgICAgICAgZXhwZWN0KGNbMF0ubmF0aXZlTmFtZSkudG8uYmUuYSgnc3RyaW5nJyk7XG4gICAgICAgICAgICBkb25lKCk7XG5cbiAgICAgICAgfSkuY2F0Y2goKGMpID0+IHtcblxuICAgICAgICAgICAgY29uc29sZS5sb2coYylcbiAgICAgICAgICAgIGV4cGVjdChjKS50by5ub3QuZXhzaXN0XG4gICAgICAgICAgICBkb25lKClcbiAgICAgICAgICAgIFxuICAgICAgICB9KVxuXG5cblxuICAgIH0pXG59KSJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
