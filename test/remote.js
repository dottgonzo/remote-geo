"use strict";
var index_1 = require('../index');
var superagent = require("superagent");
var expect = require("chai").expect;
var remote = "https://emnetserver.kernel.online/position";
var pos0 = [37.533057, 15.060421];
var pos1 = [37.504192, 15.068489];
var latlng = { latitude: pos0[0], longitude: pos0[1] };
var latlng2 = { latitude: pos1[0], longitude: pos1[1] };
var token = false;
var loc;
before(function () {
    loc = new index_1.default({ remote: remote });
});
describe("test remote server", function () {
    describe("class instantiation with standards", function () {
        it("validate worldDB conf", function () {
            expect(loc.world).to.be.an('Array');
            expect(loc.remote).to.be.a('string');
            expect(loc.remote).to.eq(remote);
            expect(loc.bigWorld).to.not.exist;
            expect(loc.localization).to.not.exist;
            expect(loc.state).to.not.exist;
            expect(loc).to.be.ok;
            expect(loc).to.be.an('Object');
        });
    });
    describe("position is ok?", function () {
        this.timeout(30000);
        it("verificate working of localization", function (done) {
            superagent.get("https://emnetserver.kernel.online/auth/authorize/couchdb/dario/2079666z").end(function (err, res) {
                if (err) {
                    done(Error(err));
                }
                else if (res && res.body && !res.body.error) {
                    var obj = res.body;
                    token = obj.token;
                    loc.setPosition(latlng, token).then(function (c) {
                        expect(loc.state).to.be.an('Object');
                        expect(c).to.be.an('Array');
                        expect(c[0]).to.be.an('Object');
                        expect(c[0].nativeName).to.be.a('string');
                        done();
                    }).catch(function (c) {
                        done(Error(c));
                    });
                }
                else {
                    done(Error(res.body.error));
                }
            });
        });
        it("verificate working of 2 localization", function (done) {
            superagent.get("https://emnetserver.kernel.online/auth/authorize/couchdb/dario/2079666z").end(function (err, res) {
                if (err) {
                    done(Error(err));
                }
                else if (res && res.body && !res.body.error) {
                    var obj = res.body;
                    token = obj.token;
                    loc.setPosition(latlng2, token).then(function (c) {
                        expect(loc.state).to.be.an('Object');
                        expect(c).to.be.an('Array');
                        expect(c[0]).to.be.an('Object');
                        expect(c[0].nativeName).to.be.a('string');
                        done();
                    }).catch(function (c) {
                        done(Error(c));
                    });
                }
                else {
                    done(Error(res.body.error));
                }
            });
        });
    });
});

//# sourceMappingURL=data:application/json;base64,
