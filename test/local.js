"use strict";
var index_1 = require('../index');
var italy = require("./italy.json");
var expect = require("chai").expect;
var pos0 = [37.533057, 15.060421];
var pos1 = [37.504192, 15.068489];
var latlng = { latitude: pos0[0], longitude: pos0[1] };
var latlng2 = { latitude: pos1[0], longitude: pos1[1] };
var loc;
before(function () {
    loc = new index_1.default({ state: italy });
});
describe("class instantiation with standards", function () {
    it("validate worldDB conf", function () {
        expect(loc.world).to.be.an('Array');
        expect(loc.state).to.eq(italy);
        expect(loc.bigWorld).to.not.exist;
        expect(loc.localization).to.not.exist;
        expect(loc.state).to.be.an('Object');
        expect(loc).to.be.ok;
        expect(loc).to.be.an('Object');
    });
});
describe("position is ok?", function () {
    this.timeout(10000);
    it("verificate working of localization", function (done) {
        loc.setPosition(latlng).then(function (c) {
            expect(loc.state).to.be.an('Object');
            expect(c).to.be.an('Array');
            expect(c[0]).to.be.an('Object');
            expect(c[0].nativeName).to.be.a('string');
            done();
        }).catch(function (c) {
            console.log(c);
            expect(c).to.not.exsist;
            done();
        });
    });
    it("verificate working of 2 localization", function (done) {
        loc.setPosition(latlng2).then(function (c) {
            expect(loc.state).to.be.an('Object');
            expect(c).to.be.an('Array');
            expect(c[0]).to.be.an('Object');
            expect(c[0].nativeName).to.be.a('string');
            done();
        }).catch(function (c) {
            console.log(c);
            expect(c).to.not.exsist;
            done();
        });
    });
});

//# sourceMappingURL=data:application/json;base64,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YWwuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgTG9jYWxpemUgZnJvbSAnLi4vaW5kZXgnXG5pbXBvcnQgKiBhcyBtb2NoYSBmcm9tIFwibW9jaGFcIjtcblxubGV0IGl0YWx5PXJlcXVpcmUoXCIuL2l0YWx5Lmpzb25cIilcblxuXG5jb25zdCBleHBlY3QgPSByZXF1aXJlKFwiY2hhaVwiKS5leHBlY3Q7XG5cblxuXG5jb25zdCBwb3MwID0gWzM3LjUzMzA1NywgMTUuMDYwNDIxXVxuY29uc3QgcG9zMSA9IFszNy41MDQxOTIsIDE1LjA2ODQ4OV1cblxuY29uc3QgbGF0bG5nID0geyBsYXRpdHVkZTogcG9zMFswXSwgbG9uZ2l0dWRlOiBwb3MwWzFdIH07XG5jb25zdCBsYXRsbmcyID0geyBsYXRpdHVkZTogcG9zMVswXSwgbG9uZ2l0dWRlOiBwb3MxWzFdIH07XG5cblxubGV0IGxvYzogTG9jYWxpemU7XG5cbmJlZm9yZShmdW5jdGlvbiAoKSB7XG5cbiAgICBsb2MgPSBuZXcgTG9jYWxpemUoeyBzdGF0ZTogaXRhbHkgfSlcblxuXG59KVxuXG5kZXNjcmliZShcImNsYXNzIGluc3RhbnRpYXRpb24gd2l0aCBzdGFuZGFyZHNcIiwgZnVuY3Rpb24gKCkge1xuICAgIGl0KFwidmFsaWRhdGUgd29ybGREQiBjb25mXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZXhwZWN0KGxvYy53b3JsZCkudG8uYmUuYW4oJ0FycmF5Jyk7XG4gICAgICAgIGV4cGVjdChsb2Muc3RhdGUpLnRvLmVxKGl0YWx5KTtcbiAgICAgICAgZXhwZWN0KGxvYy5iaWdXb3JsZCkudG8ubm90LmV4aXN0O1xuICAgICAgICBleHBlY3QobG9jLmxvY2FsaXphdGlvbikudG8ubm90LmV4aXN0O1xuICAgICAgICBleHBlY3QobG9jLnN0YXRlKS50by5iZS5hbignT2JqZWN0Jyk7XG4gICAgICAgIGV4cGVjdChsb2MpLnRvLmJlLm9rO1xuICAgICAgICBleHBlY3QobG9jKS50by5iZS5hbignT2JqZWN0Jyk7XG5cbiAgICB9KVxuXG5cbn0pXG5cbmRlc2NyaWJlKFwicG9zaXRpb24gaXMgb2s/XCIsIGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLnRpbWVvdXQoMTAwMDApO1xuXG4gICAgaXQoXCJ2ZXJpZmljYXRlIHdvcmtpbmcgb2YgbG9jYWxpemF0aW9uXCIsIGZ1bmN0aW9uIChkb25lKSB7XG4gICAgICAgIGxvYy5zZXRQb3NpdGlvbihsYXRsbmcpLnRoZW4oKGMpID0+IHtcblxuICAgICAgICAgICAgZXhwZWN0KGxvYy5zdGF0ZSkudG8uYmUuYW4oJ09iamVjdCcpO1xuICAgICAgICAgICAgZXhwZWN0KGMpLnRvLmJlLmFuKCdBcnJheScpO1xuICAgICAgICAgICAgZXhwZWN0KGNbMF0pLnRvLmJlLmFuKCdPYmplY3QnKTtcbiAgICAgICAgICAgIGV4cGVjdChjWzBdLm5hdGl2ZU5hbWUpLnRvLmJlLmEoJ3N0cmluZycpO1xuICAgICAgICAgICAgZG9uZSgpXG4gICAgICAgIH0pLmNhdGNoKChjKSA9PiB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhjKVxuICAgICAgICAgICAgZXhwZWN0KGMpLnRvLm5vdC5leHNpc3RcbiAgICAgICAgICAgIGRvbmUoKVxuICAgICAgICB9KVxuICAgIH0pXG4gICAgaXQoXCJ2ZXJpZmljYXRlIHdvcmtpbmcgb2YgMiBsb2NhbGl6YXRpb25cIiwgZnVuY3Rpb24gKGRvbmUpIHtcblxuICAgICAgICBsb2Muc2V0UG9zaXRpb24obGF0bG5nMikudGhlbigoYykgPT4ge1xuXG4gICAgICAgICAgICBleHBlY3QobG9jLnN0YXRlKS50by5iZS5hbignT2JqZWN0Jyk7XG4gICAgICAgICAgICBleHBlY3QoYykudG8uYmUuYW4oJ0FycmF5Jyk7XG4gICAgICAgICAgICBleHBlY3QoY1swXSkudG8uYmUuYW4oJ09iamVjdCcpO1xuICAgICAgICAgICAgZXhwZWN0KGNbMF0ubmF0aXZlTmFtZSkudG8uYmUuYSgnc3RyaW5nJyk7XG4gICAgICAgICAgICBkb25lKCk7XG5cbiAgICAgICAgfSkuY2F0Y2goKGMpID0+IHtcblxuICAgICAgICAgICAgY29uc29sZS5sb2coYylcbiAgICAgICAgICAgIGV4cGVjdChjKS50by5ub3QuZXhzaXN0XG4gICAgICAgICAgICBkb25lKClcbiAgICAgICAgICAgIFxuICAgICAgICB9KVxuXG5cblxuICAgIH0pXG59KSJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
