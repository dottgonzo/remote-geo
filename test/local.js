"use strict";
var index_1 = require('../index');
var italy = require("./italy.json");
var expect = require("chai").expect;
var worldDB = "https://couchdb.kernel.online/public/geoworld";
var pos0 = [37.533057, 15.060421];
var pos1 = [37.504192, 15.068489];
var latlng = { latitude: pos0[0], longitude: pos0[1] };
var latlng2 = { latitude: pos1[0], longitude: pos1[1] };
var loc;
before(function () {
    loc = new index_1.default({ state: italy, worldDB: worldDB });
});
describe("test local geo server", function () {
    describe("class instantiation with standards", function () {
        it("validate worldDB conf", function () {
            expect(loc.world).to.be.an('Array');
            expect(loc.state).to.eq(italy);
            expect(loc.bigWorld).to.not.exist;
            expect(loc.localization).to.not.exist;
            expect(loc.state).to.be.an('Object');
            expect(loc).to.be.ok;
            expect(loc).to.be.an('Object');
        });
    });
    describe("position is ok?", function () {
        this.timeout(30000);
        it("verificate working of localization", function (done) {
            loc.setPosition(latlng).then(function (c) {
                expect(loc.state).to.be.an('Object');
                expect(c).to.be.an('Array');
                expect(c[0]).to.be.an('Object');
                expect(c[0].nativeName).to.be.a('string');
                done();
            }).catch(function (c) {
                done(Error(c));
            });
        });
        it("verificate working of 2 localization", function (done) {
            loc.setPosition(latlng2).then(function (c) {
                expect(loc.state).to.be.an('Object');
                expect(c).to.be.an('Array');
                expect(c[0]).to.be.an('Object');
                expect(c[0].nativeName).to.be.a('string');
                done();
            }).catch(function (c) {
                done(Error(c));
            });
        });
    });
});

//# sourceMappingURL=data:application/json;base64,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bGl6ZSBmcm9tICcuLi9pbmRleCdcbmltcG9ydCAqIGFzIG1vY2hhIGZyb20gXCJtb2NoYVwiO1xuXG5sZXQgaXRhbHkgPSByZXF1aXJlKFwiLi9pdGFseS5qc29uXCIpXG5cblxuY29uc3QgZXhwZWN0ID0gcmVxdWlyZShcImNoYWlcIikuZXhwZWN0O1xuXG5jb25zdCB3b3JsZERCID0gXCJodHRwczovL2NvdWNoZGIua2VybmVsLm9ubGluZS9wdWJsaWMvZ2Vvd29ybGRcIjtcblxuXG5jb25zdCBwb3MwID0gWzM3LjUzMzA1NywgMTUuMDYwNDIxXVxuY29uc3QgcG9zMSA9IFszNy41MDQxOTIsIDE1LjA2ODQ4OV1cblxuY29uc3QgbGF0bG5nID0geyBsYXRpdHVkZTogcG9zMFswXSwgbG9uZ2l0dWRlOiBwb3MwWzFdIH07XG5jb25zdCBsYXRsbmcyID0geyBsYXRpdHVkZTogcG9zMVswXSwgbG9uZ2l0dWRlOiBwb3MxWzFdIH07XG5cblxubGV0IGxvYzogTG9jYWxpemU7XG5cbmJlZm9yZShmdW5jdGlvbiAoKSB7XG5cbiAgICBsb2MgPSBuZXcgTG9jYWxpemUoeyBzdGF0ZTogaXRhbHksIHdvcmxkREI6IHdvcmxkREIgfSlcblxuXG59KVxuZGVzY3JpYmUoXCJ0ZXN0IGxvY2FsIGdlbyBzZXJ2ZXJcIiwgZnVuY3Rpb24gKCkge1xuXG4gICAgZGVzY3JpYmUoXCJjbGFzcyBpbnN0YW50aWF0aW9uIHdpdGggc3RhbmRhcmRzXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaXQoXCJ2YWxpZGF0ZSB3b3JsZERCIGNvbmZcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgZXhwZWN0KGxvYy53b3JsZCkudG8uYmUuYW4oJ0FycmF5Jyk7XG4gICAgICAgICAgICBleHBlY3QobG9jLnN0YXRlKS50by5lcShpdGFseSk7XG4gICAgICAgICAgICBleHBlY3QobG9jLmJpZ1dvcmxkKS50by5ub3QuZXhpc3Q7XG4gICAgICAgICAgICBleHBlY3QobG9jLmxvY2FsaXphdGlvbikudG8ubm90LmV4aXN0O1xuICAgICAgICAgICAgZXhwZWN0KGxvYy5zdGF0ZSkudG8uYmUuYW4oJ09iamVjdCcpO1xuICAgICAgICAgICAgZXhwZWN0KGxvYykudG8uYmUub2s7XG4gICAgICAgICAgICBleHBlY3QobG9jKS50by5iZS5hbignT2JqZWN0Jyk7XG5cbiAgICAgICAgfSlcblxuXG4gICAgfSlcblxuICAgIGRlc2NyaWJlKFwicG9zaXRpb24gaXMgb2s/XCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy50aW1lb3V0KDMwMDAwKTtcblxuICAgICAgICBpdChcInZlcmlmaWNhdGUgd29ya2luZyBvZiBsb2NhbGl6YXRpb25cIiwgZnVuY3Rpb24gKGRvbmUpIHtcbiAgICAgICAgICAgIGxvYy5zZXRQb3NpdGlvbihsYXRsbmcpLnRoZW4oKGMpID0+IHtcblxuICAgICAgICAgICAgICAgIGV4cGVjdChsb2Muc3RhdGUpLnRvLmJlLmFuKCdPYmplY3QnKTtcbiAgICAgICAgICAgICAgICBleHBlY3QoYykudG8uYmUuYW4oJ0FycmF5Jyk7XG4gICAgICAgICAgICAgICAgZXhwZWN0KGNbMF0pLnRvLmJlLmFuKCdPYmplY3QnKTtcbiAgICAgICAgICAgICAgICBleHBlY3QoY1swXS5uYXRpdmVOYW1lKS50by5iZS5hKCdzdHJpbmcnKTtcbiAgICAgICAgICAgICAgICBkb25lKClcbiAgICAgICAgICAgIH0pLmNhdGNoKChjKSA9PiB7XG4gICAgICAgICAgICAgICAgZG9uZShFcnJvcihjKSlcblxuICAgICAgICAgICAgfSlcbiAgICAgICAgfSlcbiAgICAgICAgaXQoXCJ2ZXJpZmljYXRlIHdvcmtpbmcgb2YgMiBsb2NhbGl6YXRpb25cIiwgZnVuY3Rpb24gKGRvbmUpIHtcblxuICAgICAgICAgICAgbG9jLnNldFBvc2l0aW9uKGxhdGxuZzIpLnRoZW4oKGMpID0+IHtcblxuICAgICAgICAgICAgICAgIGV4cGVjdChsb2Muc3RhdGUpLnRvLmJlLmFuKCdPYmplY3QnKTtcbiAgICAgICAgICAgICAgICBleHBlY3QoYykudG8uYmUuYW4oJ0FycmF5Jyk7XG4gICAgICAgICAgICAgICAgZXhwZWN0KGNbMF0pLnRvLmJlLmFuKCdPYmplY3QnKTtcbiAgICAgICAgICAgICAgICBleHBlY3QoY1swXS5uYXRpdmVOYW1lKS50by5iZS5hKCdzdHJpbmcnKTtcbiAgICAgICAgICAgICAgICBkb25lKCk7XG5cbiAgICAgICAgICAgIH0pLmNhdGNoKChjKSA9PiB7XG5cbiAgICAgICAgICAgICAgICBkb25lKEVycm9yKGMpKVxuXG5cbiAgICAgICAgICAgIH0pXG5cblxuXG4gICAgICAgIH0pXG4gICAgfSlcbn0pIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
