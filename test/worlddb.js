"use strict";
var index_1 = require('../index');
var expect = require("chai").expect;
var worldDB = "https://couchdb.kernel.online/public/geoworld";
var pos0 = [37.533057, 15.060421];
var pos1 = [37.504192, 15.068489];
var latlng = { latitude: pos0[0], longitude: pos0[1] };
var latlng2 = { latitude: pos1[0], longitude: pos1[1] };
var loc;
before(function () {
    loc = new index_1.default({ worldDB: worldDB });
});
describe("class instantiation with standards", function () {
    it("validate worldDB conf", function () {
        expect(loc.world).to.be.an('Array');
        expect(loc.worldDB).to.be.a('string');
        expect(loc.worldDB).to.eq(worldDB);
        expect(loc.bigWorld).to.not.exist;
        expect(loc.localization).to.not.exist;
        expect(loc.state).to.not.exist;
        expect(loc).to.be.ok;
        expect(loc).to.be.an('Object');
    });
});
describe("position is ok?", function () {
    this.timeout(10000);
    it("verificate working of localization", function (done) {
        loc.setPosition(latlng).then(function (c) {
            expect(loc.state).to.be.an('Object');
            expect(c).to.be.an('Array');
            expect(c[0]).to.be.an('Object');
            expect(c[0].nativeName).to.be.a('string');
            done();
        }).catch(function (c) {
            console.log(c);
            expect(c).to.not.exsist;
            done();
        });
    });
    it("verificate working of 2 localization", function (done) {
        loc.setPosition(latlng2).then(function (c) {
            expect(loc.state).to.be.an('Object');
            expect(c).to.be.an('Array');
            expect(c[0]).to.be.an('Object');
            expect(c[0].nativeName).to.be.a('string');
            done();
        }).catch(function (c) {
            console.log(c);
            expect(c).to.not.exsist;
            done();
        });
    });
});

//# sourceMappingURL=data:application/json;base64,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QUE7SUFJTixDQUFDLENBQUMsQ0FBQTtBQUNOLENBQUMsQ0FBQyxDQUFBIiwiZmlsZSI6InRlc3Qvd29ybGRkYi5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBMb2NhbGl6ZSBmcm9tICcuLi9pbmRleCdcbmltcG9ydCAqIGFzIG1vY2hhIGZyb20gXCJtb2NoYVwiO1xuXG5jb25zdCBleHBlY3QgPSByZXF1aXJlKFwiY2hhaVwiKS5leHBlY3Q7XG5cbmNvbnN0IHdvcmxkREIgPSBcImh0dHBzOi8vY291Y2hkYi5rZXJuZWwub25saW5lL3B1YmxpYy9nZW93b3JsZFwiO1xuXG5jb25zdCBwb3MwID0gWzM3LjUzMzA1NywgMTUuMDYwNDIxXVxuY29uc3QgcG9zMSA9IFszNy41MDQxOTIsIDE1LjA2ODQ4OV1cblxuY29uc3QgbGF0bG5nID0geyBsYXRpdHVkZTogcG9zMFswXSwgbG9uZ2l0dWRlOiBwb3MwWzFdIH07XG5jb25zdCBsYXRsbmcyID0geyBsYXRpdHVkZTogcG9zMVswXSwgbG9uZ2l0dWRlOiBwb3MxWzFdIH07XG5cblxubGV0IGxvYzogTG9jYWxpemU7XG5cbmJlZm9yZShmdW5jdGlvbiAoKSB7XG5cbiAgICBsb2MgPSBuZXcgTG9jYWxpemUoeyB3b3JsZERCOiB3b3JsZERCIH0pXG5cblxufSlcblxuZGVzY3JpYmUoXCJjbGFzcyBpbnN0YW50aWF0aW9uIHdpdGggc3RhbmRhcmRzXCIsIGZ1bmN0aW9uICgpIHtcbiAgICBpdChcInZhbGlkYXRlIHdvcmxkREIgY29uZlwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGV4cGVjdChsb2Mud29ybGQpLnRvLmJlLmFuKCdBcnJheScpO1xuICAgICAgICBleHBlY3QobG9jLndvcmxkREIpLnRvLmJlLmEoJ3N0cmluZycpO1xuICAgICAgICBleHBlY3QobG9jLndvcmxkREIpLnRvLmVxKHdvcmxkREIpO1xuICAgICAgICBleHBlY3QobG9jLmJpZ1dvcmxkKS50by5ub3QuZXhpc3Q7XG4gICAgICAgIGV4cGVjdChsb2MubG9jYWxpemF0aW9uKS50by5ub3QuZXhpc3Q7XG4gICAgICAgIGV4cGVjdChsb2Muc3RhdGUpLnRvLm5vdC5leGlzdDtcbiAgICAgICAgZXhwZWN0KGxvYykudG8uYmUub2s7XG4gICAgICAgIGV4cGVjdChsb2MpLnRvLmJlLmFuKCdPYmplY3QnKTtcblxuICAgIH0pXG5cblxufSlcblxuZGVzY3JpYmUoXCJwb3NpdGlvbiBpcyBvaz9cIiwgZnVuY3Rpb24gKCkge1xuICAgIHRoaXMudGltZW91dCgxMDAwMCk7XG5cbiAgICBpdChcInZlcmlmaWNhdGUgd29ya2luZyBvZiBsb2NhbGl6YXRpb25cIiwgZnVuY3Rpb24gKGRvbmUpIHtcbiAgICAgICAgbG9jLnNldFBvc2l0aW9uKGxhdGxuZykudGhlbigoYykgPT4ge1xuXG4gICAgICAgICAgICBleHBlY3QobG9jLnN0YXRlKS50by5iZS5hbignT2JqZWN0Jyk7XG4gICAgICAgICAgICBleHBlY3QoYykudG8uYmUuYW4oJ0FycmF5Jyk7XG4gICAgICAgICAgICBleHBlY3QoY1swXSkudG8uYmUuYW4oJ09iamVjdCcpO1xuICAgICAgICAgICAgZXhwZWN0KGNbMF0ubmF0aXZlTmFtZSkudG8uYmUuYSgnc3RyaW5nJyk7XG4gICAgICAgICAgICBkb25lKClcbiAgICAgICAgfSkuY2F0Y2goKGMpID0+IHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGMpXG4gICAgICAgICAgICBleHBlY3QoYykudG8ubm90LmV4c2lzdFxuICAgICAgICAgICAgZG9uZSgpXG4gICAgICAgIH0pXG4gICAgfSlcbiAgICBpdChcInZlcmlmaWNhdGUgd29ya2luZyBvZiAyIGxvY2FsaXphdGlvblwiLCBmdW5jdGlvbiAoZG9uZSkge1xuXG4gICAgICAgIGxvYy5zZXRQb3NpdGlvbihsYXRsbmcyKS50aGVuKChjKSA9PiB7XG5cbiAgICAgICAgICAgIGV4cGVjdChsb2Muc3RhdGUpLnRvLmJlLmFuKCdPYmplY3QnKTtcbiAgICAgICAgICAgIGV4cGVjdChjKS50by5iZS5hbignQXJyYXknKTtcbiAgICAgICAgICAgIGV4cGVjdChjWzBdKS50by5iZS5hbignT2JqZWN0Jyk7XG4gICAgICAgICAgICBleHBlY3QoY1swXS5uYXRpdmVOYW1lKS50by5iZS5hKCdzdHJpbmcnKTtcbiAgICAgICAgICAgIGRvbmUoKTtcblxuICAgICAgICB9KS5jYXRjaCgoYykgPT4ge1xuXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhjKVxuICAgICAgICAgICAgZXhwZWN0KGMpLnRvLm5vdC5leHNpc3RcbiAgICAgICAgICAgIGRvbmUoKVxuICAgICAgICAgICAgXG4gICAgICAgIH0pXG5cblxuXG4gICAgfSlcbn0pIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
